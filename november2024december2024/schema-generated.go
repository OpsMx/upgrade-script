// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package november2024december2024

import (
	"context"

	"github.com/Khan/genqlient/graphql"
)

// QueryAllBuildPluginsQueryBuildTool includes the requested fields of the GraphQL type BuildTool.
// The GraphQL type's documentation follows.
//
// BuildTool contains data from build tool events.
type QueryAllBuildPluginsQueryBuildTool struct {
	// plugins used at the build time
	BuildPlugins []*QueryAllBuildPluginsQueryBuildToolBuildPluginsArtifact `json:"buildPlugins"`
}

// GetBuildPlugins returns QueryAllBuildPluginsQueryBuildTool.BuildPlugins, and is useful for accessing the field via an interface.
func (v *QueryAllBuildPluginsQueryBuildTool) GetBuildPlugins() []*QueryAllBuildPluginsQueryBuildToolBuildPluginsArtifact {
	return v.BuildPlugins
}

// QueryAllBuildPluginsQueryBuildToolBuildPluginsArtifact includes the requested fields of the GraphQL type Artifact.
type QueryAllBuildPluginsQueryBuildToolBuildPluginsArtifact struct {
	Id string `json:"id"`
}

// GetId returns QueryAllBuildPluginsQueryBuildToolBuildPluginsArtifact.Id, and is useful for accessing the field via an interface.
func (v *QueryAllBuildPluginsQueryBuildToolBuildPluginsArtifact) GetId() string { return v.Id }

// QueryAllBuildPluginsResponse is returned by QueryAllBuildPlugins on success.
type QueryAllBuildPluginsResponse struct {
	QueryBuildTool []*QueryAllBuildPluginsQueryBuildTool `json:"queryBuildTool"`
}

// GetQueryBuildTool returns QueryAllBuildPluginsResponse.QueryBuildTool, and is useful for accessing the field via an interface.
func (v *QueryAllBuildPluginsResponse) GetQueryBuildTool() []*QueryAllBuildPluginsQueryBuildTool {
	return v.QueryBuildTool
}

// UpdateArtifactTypeResponse is returned by UpdateArtifactType on success.
type UpdateArtifactTypeResponse struct {
	UpdateArtifact *UpdateArtifactTypeUpdateArtifactUpdateArtifactPayload `json:"updateArtifact"`
}

// GetUpdateArtifact returns UpdateArtifactTypeResponse.UpdateArtifact, and is useful for accessing the field via an interface.
func (v *UpdateArtifactTypeResponse) GetUpdateArtifact() *UpdateArtifactTypeUpdateArtifactUpdateArtifactPayload {
	return v.UpdateArtifact
}

// UpdateArtifactTypeUpdateArtifactUpdateArtifactPayload includes the requested fields of the GraphQL type UpdateArtifactPayload.
type UpdateArtifactTypeUpdateArtifactUpdateArtifactPayload struct {
	NumUids *int `json:"numUids"`
}

// GetNumUids returns UpdateArtifactTypeUpdateArtifactUpdateArtifactPayload.NumUids, and is useful for accessing the field via an interface.
func (v *UpdateArtifactTypeUpdateArtifactUpdateArtifactPayload) GetNumUids() *int { return v.NumUids }

// __UpdateArtifactTypeInput is used internally by genqlient
type __UpdateArtifactTypeInput struct {
	Ids []string `json:"ids"`
}

// GetIds returns __UpdateArtifactTypeInput.Ids, and is useful for accessing the field via an interface.
func (v *__UpdateArtifactTypeInput) GetIds() []string { return v.Ids }

// The query or mutation executed by QueryAllBuildPlugins.
const QueryAllBuildPlugins_Operation = `
query QueryAllBuildPlugins {
	queryBuildTool {
		buildPlugins @cascade {
			id
		}
	}
}
`

func QueryAllBuildPlugins(
	ctx_ context.Context,
	client_ graphql.Client,
) (*QueryAllBuildPluginsResponse, error) {
	req_ := &graphql.Request{
		OpName: "QueryAllBuildPlugins",
		Query:  QueryAllBuildPlugins_Operation,
	}
	var err_ error

	var data_ QueryAllBuildPluginsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by UpdateArtifactType.
const UpdateArtifactType_Operation = `
mutation UpdateArtifactType ($ids: [String!]!) {
	updateArtifact(input: {set:{artifactType:"plugin"},filter:{id:{in:$ids}}}) {
		numUids
	}
}
`

func UpdateArtifactType(
	ctx_ context.Context,
	client_ graphql.Client,
	ids []string,
) (*UpdateArtifactTypeResponse, error) {
	req_ := &graphql.Request{
		OpName: "UpdateArtifactType",
		Query:  UpdateArtifactType_Operation,
		Variables: &__UpdateArtifactTypeInput{
			Ids: ids,
		},
	}
	var err_ error

	var data_ UpdateArtifactTypeResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

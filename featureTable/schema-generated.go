// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package featuretable

import (
	"context"
	"time"

	"github.com/Khan/genqlient/graphql"
)

// __addNewRecordFeatureTableInput is used internally by genqlient
type __addNewRecordFeatureTableInput struct {
	Id       string     `json:"id"`
	OrgId    string     `json:"orgId"`
	Scan     string     `json:"scan"`
	FeatType string     `json:"featType"`
	Category string     `json:"category"`
	Enabled  *bool      `json:"enabled"`
	Ts       *time.Time `json:"ts"`
}

// GetId returns __addNewRecordFeatureTableInput.Id, and is useful for accessing the field via an interface.
func (v *__addNewRecordFeatureTableInput) GetId() string { return v.Id }

// GetOrgId returns __addNewRecordFeatureTableInput.OrgId, and is useful for accessing the field via an interface.
func (v *__addNewRecordFeatureTableInput) GetOrgId() string { return v.OrgId }

// GetScan returns __addNewRecordFeatureTableInput.Scan, and is useful for accessing the field via an interface.
func (v *__addNewRecordFeatureTableInput) GetScan() string { return v.Scan }

// GetFeatType returns __addNewRecordFeatureTableInput.FeatType, and is useful for accessing the field via an interface.
func (v *__addNewRecordFeatureTableInput) GetFeatType() string { return v.FeatType }

// GetCategory returns __addNewRecordFeatureTableInput.Category, and is useful for accessing the field via an interface.
func (v *__addNewRecordFeatureTableInput) GetCategory() string { return v.Category }

// GetEnabled returns __addNewRecordFeatureTableInput.Enabled, and is useful for accessing the field via an interface.
func (v *__addNewRecordFeatureTableInput) GetEnabled() *bool { return v.Enabled }

// GetTs returns __addNewRecordFeatureTableInput.Ts, and is useful for accessing the field via an interface.
func (v *__addNewRecordFeatureTableInput) GetTs() *time.Time { return v.Ts }

// __checkIfFeatureRecordExistsInput is used internally by genqlient
type __checkIfFeatureRecordExistsInput struct {
	FeatType string `json:"featType"`
	Scan     string `json:"scan"`
}

// GetFeatType returns __checkIfFeatureRecordExistsInput.FeatType, and is useful for accessing the field via an interface.
func (v *__checkIfFeatureRecordExistsInput) GetFeatType() string { return v.FeatType }

// GetScan returns __checkIfFeatureRecordExistsInput.Scan, and is useful for accessing the field via an interface.
func (v *__checkIfFeatureRecordExistsInput) GetScan() string { return v.Scan }

// addNewRecordFeatureTableAddFeatureModeAddFeatureModePayload includes the requested fields of the GraphQL type AddFeatureModePayload.
type addNewRecordFeatureTableAddFeatureModeAddFeatureModePayload struct {
	NumUids *int `json:"numUids"`
}

// GetNumUids returns addNewRecordFeatureTableAddFeatureModeAddFeatureModePayload.NumUids, and is useful for accessing the field via an interface.
func (v *addNewRecordFeatureTableAddFeatureModeAddFeatureModePayload) GetNumUids() *int {
	return v.NumUids
}

// addNewRecordFeatureTableResponse is returned by addNewRecordFeatureTable on success.
type addNewRecordFeatureTableResponse struct {
	AddFeatureMode *addNewRecordFeatureTableAddFeatureModeAddFeatureModePayload `json:"addFeatureMode"`
}

// GetAddFeatureMode returns addNewRecordFeatureTableResponse.AddFeatureMode, and is useful for accessing the field via an interface.
func (v *addNewRecordFeatureTableResponse) GetAddFeatureMode() *addNewRecordFeatureTableAddFeatureModeAddFeatureModePayload {
	return v.AddFeatureMode
}

// checkIfFeatureRecordExistsQueryFeatureMode includes the requested fields of the GraphQL type FeatureMode.
type checkIfFeatureRecordExistsQueryFeatureMode struct {
	Id string `json:"id"`
}

// GetId returns checkIfFeatureRecordExistsQueryFeatureMode.Id, and is useful for accessing the field via an interface.
func (v *checkIfFeatureRecordExistsQueryFeatureMode) GetId() string { return v.Id }

// checkIfFeatureRecordExistsResponse is returned by checkIfFeatureRecordExists on success.
type checkIfFeatureRecordExistsResponse struct {
	QueryFeatureMode []*checkIfFeatureRecordExistsQueryFeatureMode `json:"queryFeatureMode"`
}

// GetQueryFeatureMode returns checkIfFeatureRecordExistsResponse.QueryFeatureMode, and is useful for accessing the field via an interface.
func (v *checkIfFeatureRecordExistsResponse) GetQueryFeatureMode() []*checkIfFeatureRecordExistsQueryFeatureMode {
	return v.QueryFeatureMode
}

// The query or mutation executed by addNewRecordFeatureTable.
const addNewRecordFeatureTable_Operation = `
mutation addNewRecordFeatureTable ($id: String!, $orgId: String!, $scan: String!, $featType: String!, $category: String!, $enabled: Boolean!, $ts: DateTime!) {
	addFeatureMode(input: {id:$id,organization:{id:$orgId},scan:$scan,type:$featType,enabled:$enabled,category:$category,createdAt:$ts,updatedAt:$ts}) {
		numUids
	}
}
`

func addNewRecordFeatureTable(
	ctx_ context.Context,
	client_ graphql.Client,
	id string,
	orgId string,
	scan string,
	featType string,
	category string,
	enabled *bool,
	ts *time.Time,
) (*addNewRecordFeatureTableResponse, error) {
	req_ := &graphql.Request{
		OpName: "addNewRecordFeatureTable",
		Query:  addNewRecordFeatureTable_Operation,
		Variables: &__addNewRecordFeatureTableInput{
			Id:       id,
			OrgId:    orgId,
			Scan:     scan,
			FeatType: featType,
			Category: category,
			Enabled:  enabled,
			Ts:       ts,
		},
	}
	var err_ error

	var data_ addNewRecordFeatureTableResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by checkIfFeatureRecordExists.
const checkIfFeatureRecordExists_Operation = `
query checkIfFeatureRecordExists ($featType: String!, $scan: String!) {
	queryFeatureMode(filter: {type:{eq:$featType},scan:{eq:$scan}}) {
		id
	}
}
`

func checkIfFeatureRecordExists(
	ctx_ context.Context,
	client_ graphql.Client,
	featType string,
	scan string,
) (*checkIfFeatureRecordExistsResponse, error) {
	req_ := &graphql.Request{
		OpName: "checkIfFeatureRecordExists",
		Query:  checkIfFeatureRecordExists_Operation,
		Variables: &__checkIfFeatureRecordExistsInput{
			FeatType: featType,
			Scan:     scan,
		},
	}
	var err_ error

	var data_ checkIfFeatureRecordExistsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package july2025august2025

import (
	"context"

	"github.com/Khan/genqlient/graphql"
)

// SetProjectLevelToRepositeryResponse is returned by SetProjectLevelToRepositery on success.
type SetProjectLevelToRepositeryResponse struct {
	UpdateProject *SetProjectLevelToRepositeryUpdateProjectUpdateProjectPayload `json:"updateProject"`
}

// GetUpdateProject returns SetProjectLevelToRepositeryResponse.UpdateProject, and is useful for accessing the field via an interface.
func (v *SetProjectLevelToRepositeryResponse) GetUpdateProject() *SetProjectLevelToRepositeryUpdateProjectUpdateProjectPayload {
	return v.UpdateProject
}

// SetProjectLevelToRepositeryUpdateProjectUpdateProjectPayload includes the requested fields of the GraphQL type UpdateProjectPayload.
type SetProjectLevelToRepositeryUpdateProjectUpdateProjectPayload struct {
	NumUids *int `json:"numUids"`
}

// GetNumUids returns SetProjectLevelToRepositeryUpdateProjectUpdateProjectPayload.NumUids, and is useful for accessing the field via an interface.
func (v *SetProjectLevelToRepositeryUpdateProjectUpdateProjectPayload) GetNumUids() *int {
	return v.NumUids
}

// The mutation executed by SetProjectLevelToRepositery.
const SetProjectLevelToRepositery_Operation = `
mutation SetProjectLevelToRepositery {
	updateProject(input: {set:{level:"repository"},filter:{has:name}}) {
		numUids
	}
}
`

func SetProjectLevelToRepositery(
	ctx_ context.Context,
	client_ graphql.Client,
) (data_ *SetProjectLevelToRepositeryResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "SetProjectLevelToRepositery",
		Query:  SetProjectLevelToRepositery_Operation,
	}

	data_ = &SetProjectLevelToRepositeryResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

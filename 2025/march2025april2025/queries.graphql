mutation SetDefaultAttemptForDeployment {
    updateApplicationDeployment(
        input: { set: { attempt: 0 }, filter: { has: component } }
    ) {
        numUids
    }
}

mutation SetDefaultAttemptForArtifact {
    updateArtifact(
        input: { set: { attempt: 0 }, filter: { has: scanData } }
    ) {
        numUids
    }
}

mutation SetDefaultScanStateForArtifact {
    updateArtifactScanData(
        input: { set: { scanState: "completed" }, filter: { has: components } }
    ) {
        numUids
    }
}

query GetArtifacts {
    scanning: queryArtifact @cascade {
        artifactName
        artifactTag
        artifactType
        scanData {
            id
            artifactNameTag
            artifactSha
            artifactRisk(filter: { artifactRiskStatus: { eq: scanning } }) {
                artifactRiskStatus
            }
        }
    }
    noartifact: queryArtifactScanData(filter: { not: { has: artifactDetails } }) @cascade {
        id
        artifactNameTag
        artifactSha
    }
}

mutation DeleteArtifactScanData($scanIDs: [String]) {
    deleteArtifactScanData(filter: { id: { in: $scanIDs } }) {
        msg
        numUids
    }
}

query PolicyRunHistoryScanningDeployments {
    queryApplicationDeployment(filter: { deploymentStage: { in: [scanning] } }) @cascade {
        policyRunHistory{
            id
        }
    }
}

mutation DeleteRunHistory($ids: [ID!]) {
    deleteRunHistory(filter: { id: $ids }) {
        msg
        numUids
    }
}

mutation UpdateApplicationDeployment {
    updateApplicationDeployment(
        input: {
            filter: { deploymentStage: { eq: scanning } }
            set: { 
                deploymentStage: discovered
                attempt:1 
            }
        }
    ) {
        numUids
    }
}

query GetRunHistories{
    queryRunHistory{
        id
    }
}

mutation SetDefaultRunhistoryValues($runhistoryID:[ID!]) {
    updateRunHistory(
        input: {
            filter: { id: $runhistoryID }
            set: {
                ToolAccountName: ""
                BuildTool: ""
                SourceTool: ""
                ArtifactTool: ""
                DeployTool: ""
            }
        }
    ) {
        numUids
    }
}

query QueryRunHistoryWTeamIDNull {
    queryRunHistory(filter: { TeamID: { eq: null } }) {
        id
    }
}

mutation SetDefaultTeamIDInRunHistory($ids:[ID!]) {
    updateRunHistory(input: { set: { TeamID: "" }, filter: { id: $ids } }) {
        numUids
    }
}

query GetPolicyEnfIDOfPolicyDef($policyName: String!) {
    queryPolicyEnforcement @cascade(fields:"policy") {
        id
        policy(filter: { policyName: { eq: $policyName } }) {
            id
            createdAt
            updatedAt
            policyName
            category
            stage
            description
            scheduledPolicy
            script
            variables
            conditionName
            suggestion
            ownerOrg {
                id
            }
        }
    }
}

query ExtraPolicies($policyNames:[String!]) {
    queryPolicyDefinition(filter: { not: { policyName: { in: $policyNames } } }) {
        id
        policyName
    }
}


mutation DeletePolicyDefinition($policyIDs: [String!]) {
    deletePolicyDefinition(filter: { id: { in: $policyIDs } }) {
        msg
        numUids
    }
}

mutation AddPolicyDefinition($policy: AddPolicyDefinitionInput!) {
    addPolicyDefinition(input: [$policy]) {
        numUids
    }
}

mutation UpdatePolicyEnforcement($policyEnfIDs:[ID!],$policyDefID:String!) {
    updatePolicyEnforcement(
        input: { set: { policy: { id: $policyDefID } }, filter: { id: $policyEnfIDs } }
    ) {
        numUids
    }
}

mutation DeletePolicyEnforcement {
    deletePolicyEnforcement(filter: { not: { has: policy } }) {
        msg
        numUids
    }
}

query QueryAlertsToDelete {
    queryRunHistory(filter: { not: { has: policyEnforcements } }) {
        id
    }
}

mutation DeleteRunHistories($ids:[ID!]) {
    deleteRunHistory(filter: { id: $ids }) {
        numUids
    }
}

mutation CleanUpSecurityIssue {
    deleteSecurityIssue(filter: { not: { has: Affects } }) {
        numUids
    }
}

// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package may2025june2025

import (
	"context"

	"github.com/Khan/genqlient/graphql"
)

// SetProjectRiskAsCompletedResponse is returned by SetProjectRiskAsCompleted on success.
type SetProjectRiskAsCompletedResponse struct {
	UpdateProject *SetProjectRiskAsCompletedUpdateProjectUpdateProjectPayload `json:"updateProject"`
}

// GetUpdateProject returns SetProjectRiskAsCompletedResponse.UpdateProject, and is useful for accessing the field via an interface.
func (v *SetProjectRiskAsCompletedResponse) GetUpdateProject() *SetProjectRiskAsCompletedUpdateProjectUpdateProjectPayload {
	return v.UpdateProject
}

// SetProjectRiskAsCompletedUpdateProjectUpdateProjectPayload includes the requested fields of the GraphQL type UpdateProjectPayload.
type SetProjectRiskAsCompletedUpdateProjectUpdateProjectPayload struct {
	NumUids *int `json:"numUids"`
}

// GetNumUids returns SetProjectRiskAsCompletedUpdateProjectUpdateProjectPayload.NumUids, and is useful for accessing the field via an interface.
func (v *SetProjectRiskAsCompletedUpdateProjectUpdateProjectPayload) GetNumUids() *int {
	return v.NumUids
}

// The mutation executed by SetProjectRiskAsCompleted.
const SetProjectRiskAsCompleted_Operation = `
mutation SetProjectRiskAsCompleted {
	updateProject(input: {set:{riskStatus:completed},filter:{has:name}}) {
		numUids
	}
}
`

func SetProjectRiskAsCompleted(
	ctx_ context.Context,
	client_ graphql.Client,
) (data_ *SetProjectRiskAsCompletedResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "SetProjectRiskAsCompleted",
		Query:  SetProjectRiskAsCompleted_Operation,
	}

	data_ = &SetProjectRiskAsCompletedResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

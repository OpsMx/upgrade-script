package august2024v2september2024

import (
	"context"
	"fmt"

	"github.com/Khan/genqlient/graphql"
)

func updateVulnerabilityRatingsAndPriorityNum(gqlClient graphql.Client) error {

	if _, err := UpdateVulnerabilityForCritical(context.Background(), gqlClient); err != nil {
		return fmt.Errorf("error: UpdateVulnerabilityForCritical: %s", err.Error())
	}

	if _, err := UpdateVulnerabilityForHigh(context.Background(), gqlClient); err != nil {
		return fmt.Errorf("error: UpdateVulnerabilityForHigh: %s", err.Error())
	}

	if _, err := UpdateVulnerabilityForMedium(context.Background(), gqlClient); err != nil {
		return fmt.Errorf("error: UpdateVulnerabilityForMedium: %s", err.Error())
	}

	if _, err := UpdateVulnerabilityForLow(context.Background(), gqlClient); err != nil {
		return fmt.Errorf("error: UpdateVulnerabilityForLow: %s", err.Error())
	}

	if _, err := UpdateVulnerabilityForUnknown(context.Background(), gqlClient); err != nil {
		return fmt.Errorf("error: UpdateVulnerabilityForUnknown: %s", err.Error())
	}

	if _, err := UpdateVulnerabilityForOthers(context.Background(), gqlClient); err != nil {
		return fmt.Errorf("error: UpdateVulnerabilityForOthers: %s", err.Error())
	}

	if _, err := UpdateVulnerabilityPriority1plus(context.Background(), gqlClient); err != nil {
		return fmt.Errorf("error: UpdateVulnerabilityPriority1plus: %s", err.Error())
	}

	if _, err := UpdateVulnerabilityPriority1(context.Background(), gqlClient); err != nil {
		return fmt.Errorf("error: UpdateVulnerabilityPriority1: %s", err.Error())
	}

	if _, err := UpdateVulnerabilityPriority2(context.Background(), gqlClient); err != nil {
		return fmt.Errorf("error: UpdateVulnerabilityPriority2: %s", err.Error())
	}

	if _, err := UpdateVulnerabilityPriority3(context.Background(), gqlClient); err != nil {
		return fmt.Errorf("error: UpdateVulnerabilityPriority3: %s", err.Error())
	}

	if _, err := UpdateVulnerabilityPriority4(context.Background(), gqlClient); err != nil {
		return fmt.Errorf("error: UpdateVulnerabilityPriority4: %s", err.Error())
	}

	return nil
}

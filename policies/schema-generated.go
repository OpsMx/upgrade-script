// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package policyingenstionscript

import (
	"context"
	"time"

	"github.com/Khan/genqlient/graphql"
)

type AddPolicyDefinitionInput struct {
	Id               string           `json:"id"`
	OwnerOrg         *OrganizationRef `json:"ownerOrg,omitempty"`
	OwnerTeam        *TeamRef         `json:"ownerTeam,omitempty"`
	OwnerApplication *ApplicationRef  `json:"ownerApplication,omitempty"`
	CreatedAt        *time.Time       `json:"createdAt"`
	UpdatedAt        *time.Time       `json:"updatedAt"`
	PolicyName       string           `json:"policyName"`
	Category         string           `json:"category"`
	Stage            string           `json:"stage"`
	Description      string           `json:"description"`
	ScheduledPolicy  *bool            `json:"scheduledPolicy"`
	Script           string           `json:"script"`
	Variables        string           `json:"variables"`
	ConditionName    string           `json:"conditionName"`
	Suggestion       string           `json:"suggestion"`
}

// GetId returns AddPolicyDefinitionInput.Id, and is useful for accessing the field via an interface.
func (v *AddPolicyDefinitionInput) GetId() string { return v.Id }

// GetOwnerOrg returns AddPolicyDefinitionInput.OwnerOrg, and is useful for accessing the field via an interface.
func (v *AddPolicyDefinitionInput) GetOwnerOrg() *OrganizationRef { return v.OwnerOrg }

// GetOwnerTeam returns AddPolicyDefinitionInput.OwnerTeam, and is useful for accessing the field via an interface.
func (v *AddPolicyDefinitionInput) GetOwnerTeam() *TeamRef { return v.OwnerTeam }

// GetOwnerApplication returns AddPolicyDefinitionInput.OwnerApplication, and is useful for accessing the field via an interface.
func (v *AddPolicyDefinitionInput) GetOwnerApplication() *ApplicationRef { return v.OwnerApplication }

// GetCreatedAt returns AddPolicyDefinitionInput.CreatedAt, and is useful for accessing the field via an interface.
func (v *AddPolicyDefinitionInput) GetCreatedAt() *time.Time { return v.CreatedAt }

// GetUpdatedAt returns AddPolicyDefinitionInput.UpdatedAt, and is useful for accessing the field via an interface.
func (v *AddPolicyDefinitionInput) GetUpdatedAt() *time.Time { return v.UpdatedAt }

// GetPolicyName returns AddPolicyDefinitionInput.PolicyName, and is useful for accessing the field via an interface.
func (v *AddPolicyDefinitionInput) GetPolicyName() string { return v.PolicyName }

// GetCategory returns AddPolicyDefinitionInput.Category, and is useful for accessing the field via an interface.
func (v *AddPolicyDefinitionInput) GetCategory() string { return v.Category }

// GetStage returns AddPolicyDefinitionInput.Stage, and is useful for accessing the field via an interface.
func (v *AddPolicyDefinitionInput) GetStage() string { return v.Stage }

// GetDescription returns AddPolicyDefinitionInput.Description, and is useful for accessing the field via an interface.
func (v *AddPolicyDefinitionInput) GetDescription() string { return v.Description }

// GetScheduledPolicy returns AddPolicyDefinitionInput.ScheduledPolicy, and is useful for accessing the field via an interface.
func (v *AddPolicyDefinitionInput) GetScheduledPolicy() *bool { return v.ScheduledPolicy }

// GetScript returns AddPolicyDefinitionInput.Script, and is useful for accessing the field via an interface.
func (v *AddPolicyDefinitionInput) GetScript() string { return v.Script }

// GetVariables returns AddPolicyDefinitionInput.Variables, and is useful for accessing the field via an interface.
func (v *AddPolicyDefinitionInput) GetVariables() string { return v.Variables }

// GetConditionName returns AddPolicyDefinitionInput.ConditionName, and is useful for accessing the field via an interface.
func (v *AddPolicyDefinitionInput) GetConditionName() string { return v.ConditionName }

// GetSuggestion returns AddPolicyDefinitionInput.Suggestion, and is useful for accessing the field via an interface.
func (v *AddPolicyDefinitionInput) GetSuggestion() string { return v.Suggestion }

type AddPolicyEnforcementInput struct {
	Policy              *PolicyDefinitionRef `json:"policy,omitempty"`
	EnforcedOrg         *OrganizationRef     `json:"enforcedOrg,omitempty"`
	EnforcedTeam        *TeamRef             `json:"enforcedTeam,omitempty"`
	EnforcedApplication *ApplicationRef      `json:"enforcedApplication,omitempty"`
	Status              *bool                `json:"status"`
	ForceApply          *bool                `json:"forceApply"`
	Severity            Severity             `json:"severity"`
	DatasourceTool      string               `json:"datasourceTool"`
	Action              string               `json:"action"`
	ConditionValue      string               `json:"conditionValue"`
	Environments        []*EnvironmentRef    `json:"environments,omitempty"`
	Tags                []*TagRef            `json:"tags,omitempty"`
	CreatedAt           *time.Time           `json:"createdAt"`
	UpdatedAt           *time.Time           `json:"updatedAt"`
}

// GetPolicy returns AddPolicyEnforcementInput.Policy, and is useful for accessing the field via an interface.
func (v *AddPolicyEnforcementInput) GetPolicy() *PolicyDefinitionRef { return v.Policy }

// GetEnforcedOrg returns AddPolicyEnforcementInput.EnforcedOrg, and is useful for accessing the field via an interface.
func (v *AddPolicyEnforcementInput) GetEnforcedOrg() *OrganizationRef { return v.EnforcedOrg }

// GetEnforcedTeam returns AddPolicyEnforcementInput.EnforcedTeam, and is useful for accessing the field via an interface.
func (v *AddPolicyEnforcementInput) GetEnforcedTeam() *TeamRef { return v.EnforcedTeam }

// GetEnforcedApplication returns AddPolicyEnforcementInput.EnforcedApplication, and is useful for accessing the field via an interface.
func (v *AddPolicyEnforcementInput) GetEnforcedApplication() *ApplicationRef {
	return v.EnforcedApplication
}

// GetStatus returns AddPolicyEnforcementInput.Status, and is useful for accessing the field via an interface.
func (v *AddPolicyEnforcementInput) GetStatus() *bool { return v.Status }

// GetForceApply returns AddPolicyEnforcementInput.ForceApply, and is useful for accessing the field via an interface.
func (v *AddPolicyEnforcementInput) GetForceApply() *bool { return v.ForceApply }

// GetSeverity returns AddPolicyEnforcementInput.Severity, and is useful for accessing the field via an interface.
func (v *AddPolicyEnforcementInput) GetSeverity() Severity { return v.Severity }

// GetDatasourceTool returns AddPolicyEnforcementInput.DatasourceTool, and is useful for accessing the field via an interface.
func (v *AddPolicyEnforcementInput) GetDatasourceTool() string { return v.DatasourceTool }

// GetAction returns AddPolicyEnforcementInput.Action, and is useful for accessing the field via an interface.
func (v *AddPolicyEnforcementInput) GetAction() string { return v.Action }

// GetConditionValue returns AddPolicyEnforcementInput.ConditionValue, and is useful for accessing the field via an interface.
func (v *AddPolicyEnforcementInput) GetConditionValue() string { return v.ConditionValue }

// GetEnvironments returns AddPolicyEnforcementInput.Environments, and is useful for accessing the field via an interface.
func (v *AddPolicyEnforcementInput) GetEnvironments() []*EnvironmentRef { return v.Environments }

// GetTags returns AddPolicyEnforcementInput.Tags, and is useful for accessing the field via an interface.
func (v *AddPolicyEnforcementInput) GetTags() []*TagRef { return v.Tags }

// GetCreatedAt returns AddPolicyEnforcementInput.CreatedAt, and is useful for accessing the field via an interface.
func (v *AddPolicyEnforcementInput) GetCreatedAt() *time.Time { return v.CreatedAt }

// GetUpdatedAt returns AddPolicyEnforcementInput.UpdatedAt, and is useful for accessing the field via an interface.
func (v *AddPolicyEnforcementInput) GetUpdatedAt() *time.Time { return v.UpdatedAt }

type AddTagInput struct {
	Id             string                  `json:"id"`
	TagName        string                  `json:"tagName"`
	TagValue       string                  `json:"tagValue"`
	TagDescription string                  `json:"tagDescription"`
	CreatedBy      string                  `json:"createdBy"`
	CreatedAt      *time.Time              `json:"createdAt"`
	UpdatedAt      *time.Time              `json:"updatedAt"`
	Policies       []*PolicyEnforcementRef `json:"policies,omitempty"`
}

// GetId returns AddTagInput.Id, and is useful for accessing the field via an interface.
func (v *AddTagInput) GetId() string { return v.Id }

// GetTagName returns AddTagInput.TagName, and is useful for accessing the field via an interface.
func (v *AddTagInput) GetTagName() string { return v.TagName }

// GetTagValue returns AddTagInput.TagValue, and is useful for accessing the field via an interface.
func (v *AddTagInput) GetTagValue() string { return v.TagValue }

// GetTagDescription returns AddTagInput.TagDescription, and is useful for accessing the field via an interface.
func (v *AddTagInput) GetTagDescription() string { return v.TagDescription }

// GetCreatedBy returns AddTagInput.CreatedBy, and is useful for accessing the field via an interface.
func (v *AddTagInput) GetCreatedBy() string { return v.CreatedBy }

// GetCreatedAt returns AddTagInput.CreatedAt, and is useful for accessing the field via an interface.
func (v *AddTagInput) GetCreatedAt() *time.Time { return v.CreatedAt }

// GetUpdatedAt returns AddTagInput.UpdatedAt, and is useful for accessing the field via an interface.
func (v *AddTagInput) GetUpdatedAt() *time.Time { return v.UpdatedAt }

// GetPolicies returns AddTagInput.Policies, and is useful for accessing the field via an interface.
func (v *AddTagInput) GetPolicies() []*PolicyEnforcementRef { return v.Policies }

type ApplicationDeploymentRef struct {
	// id is randomly assigned
	Id                     string                     `json:"id"`
	Artifact               []*ArtifactRef             `json:"artifact,omitempty"`
	ApplicationEnvironment *ApplicationEnvironmentRef `json:"applicationEnvironment,omitempty"`
	DeployedAt             *time.Time                 `json:"deployedAt"`
	// deploymentStage is an enum and can be discovered, current, previous or blocked
	DeploymentStage DeploymentStage `json:"deploymentStage"`
	// source is argo, spinnaker etc
	Source string `json:"source"`
	// component would be a service
	Component string `json:"component"`
	// user who deployed the artifact
	DeployedBy       string                        `json:"deployedBy"`
	ToolsUsed        *ToolsUsedRef                 `json:"toolsUsed,omitempty"`
	DeploymentRisk   *ApplicationDeploymentRiskRef `json:"deploymentRisk,omitempty"`
	PolicyRunHistory []*RunHistoryRef              `json:"policyRunHistory,omitempty"`
}

// GetId returns ApplicationDeploymentRef.Id, and is useful for accessing the field via an interface.
func (v *ApplicationDeploymentRef) GetId() string { return v.Id }

// GetArtifact returns ApplicationDeploymentRef.Artifact, and is useful for accessing the field via an interface.
func (v *ApplicationDeploymentRef) GetArtifact() []*ArtifactRef { return v.Artifact }

// GetApplicationEnvironment returns ApplicationDeploymentRef.ApplicationEnvironment, and is useful for accessing the field via an interface.
func (v *ApplicationDeploymentRef) GetApplicationEnvironment() *ApplicationEnvironmentRef {
	return v.ApplicationEnvironment
}

// GetDeployedAt returns ApplicationDeploymentRef.DeployedAt, and is useful for accessing the field via an interface.
func (v *ApplicationDeploymentRef) GetDeployedAt() *time.Time { return v.DeployedAt }

// GetDeploymentStage returns ApplicationDeploymentRef.DeploymentStage, and is useful for accessing the field via an interface.
func (v *ApplicationDeploymentRef) GetDeploymentStage() DeploymentStage { return v.DeploymentStage }

// GetSource returns ApplicationDeploymentRef.Source, and is useful for accessing the field via an interface.
func (v *ApplicationDeploymentRef) GetSource() string { return v.Source }

// GetComponent returns ApplicationDeploymentRef.Component, and is useful for accessing the field via an interface.
func (v *ApplicationDeploymentRef) GetComponent() string { return v.Component }

// GetDeployedBy returns ApplicationDeploymentRef.DeployedBy, and is useful for accessing the field via an interface.
func (v *ApplicationDeploymentRef) GetDeployedBy() string { return v.DeployedBy }

// GetToolsUsed returns ApplicationDeploymentRef.ToolsUsed, and is useful for accessing the field via an interface.
func (v *ApplicationDeploymentRef) GetToolsUsed() *ToolsUsedRef { return v.ToolsUsed }

// GetDeploymentRisk returns ApplicationDeploymentRef.DeploymentRisk, and is useful for accessing the field via an interface.
func (v *ApplicationDeploymentRef) GetDeploymentRisk() *ApplicationDeploymentRiskRef {
	return v.DeploymentRisk
}

// GetPolicyRunHistory returns ApplicationDeploymentRef.PolicyRunHistory, and is useful for accessing the field via an interface.
func (v *ApplicationDeploymentRef) GetPolicyRunHistory() []*RunHistoryRef { return v.PolicyRunHistory }

type ApplicationDeploymentRiskRef struct {
	Id                    *string                   `json:"id"`
	SourceCodeAlertsScore *int                      `json:"sourceCodeAlertsScore"`
	BuildAlertsScore      *int                      `json:"buildAlertsScore"`
	ArtifactAlertsScore   *int                      `json:"artifactAlertsScore"`
	DeploymentAlertsScore *int                      `json:"deploymentAlertsScore"`
	DeploymentRiskStatus  RiskStatus                `json:"deploymentRiskStatus"`
	ApplicationDeployment *ApplicationDeploymentRef `json:"applicationDeployment,omitempty"`
}

// GetId returns ApplicationDeploymentRiskRef.Id, and is useful for accessing the field via an interface.
func (v *ApplicationDeploymentRiskRef) GetId() *string { return v.Id }

// GetSourceCodeAlertsScore returns ApplicationDeploymentRiskRef.SourceCodeAlertsScore, and is useful for accessing the field via an interface.
func (v *ApplicationDeploymentRiskRef) GetSourceCodeAlertsScore() *int {
	return v.SourceCodeAlertsScore
}

// GetBuildAlertsScore returns ApplicationDeploymentRiskRef.BuildAlertsScore, and is useful for accessing the field via an interface.
func (v *ApplicationDeploymentRiskRef) GetBuildAlertsScore() *int { return v.BuildAlertsScore }

// GetArtifactAlertsScore returns ApplicationDeploymentRiskRef.ArtifactAlertsScore, and is useful for accessing the field via an interface.
func (v *ApplicationDeploymentRiskRef) GetArtifactAlertsScore() *int { return v.ArtifactAlertsScore }

// GetDeploymentAlertsScore returns ApplicationDeploymentRiskRef.DeploymentAlertsScore, and is useful for accessing the field via an interface.
func (v *ApplicationDeploymentRiskRef) GetDeploymentAlertsScore() *int {
	return v.DeploymentAlertsScore
}

// GetDeploymentRiskStatus returns ApplicationDeploymentRiskRef.DeploymentRiskStatus, and is useful for accessing the field via an interface.
func (v *ApplicationDeploymentRiskRef) GetDeploymentRiskStatus() RiskStatus {
	return v.DeploymentRiskStatus
}

// GetApplicationDeployment returns ApplicationDeploymentRiskRef.ApplicationDeployment, and is useful for accessing the field via an interface.
func (v *ApplicationDeploymentRiskRef) GetApplicationDeployment() *ApplicationDeploymentRef {
	return v.ApplicationDeployment
}

type ApplicationEnvironmentRef struct {
	// id is randomly assigned
	Id               string               `json:"id"`
	Environment      *EnvironmentRef      `json:"environment,omitempty"`
	Application      *ApplicationRef      `json:"application,omitempty"`
	DeploymentTarget *DeploymentTargetRef `json:"deploymentTarget,omitempty"`
	Namespace        string               `json:"namespace"`
	// toolsUsed is a comma-separated string that contains all the tools(source, build, artifact, deploy etc) for an app env
	ToolsUsed   []string                    `json:"toolsUsed"`
	Deployments []*ApplicationDeploymentRef `json:"deployments,omitempty"`
	RiskStatus  *ApplicationRiskStatusRef   `json:"riskStatus,omitempty"`
	Metadata    []*KeyValueRef              `json:"metadata,omitempty"`
}

// GetId returns ApplicationEnvironmentRef.Id, and is useful for accessing the field via an interface.
func (v *ApplicationEnvironmentRef) GetId() string { return v.Id }

// GetEnvironment returns ApplicationEnvironmentRef.Environment, and is useful for accessing the field via an interface.
func (v *ApplicationEnvironmentRef) GetEnvironment() *EnvironmentRef { return v.Environment }

// GetApplication returns ApplicationEnvironmentRef.Application, and is useful for accessing the field via an interface.
func (v *ApplicationEnvironmentRef) GetApplication() *ApplicationRef { return v.Application }

// GetDeploymentTarget returns ApplicationEnvironmentRef.DeploymentTarget, and is useful for accessing the field via an interface.
func (v *ApplicationEnvironmentRef) GetDeploymentTarget() *DeploymentTargetRef {
	return v.DeploymentTarget
}

// GetNamespace returns ApplicationEnvironmentRef.Namespace, and is useful for accessing the field via an interface.
func (v *ApplicationEnvironmentRef) GetNamespace() string { return v.Namespace }

// GetToolsUsed returns ApplicationEnvironmentRef.ToolsUsed, and is useful for accessing the field via an interface.
func (v *ApplicationEnvironmentRef) GetToolsUsed() []string { return v.ToolsUsed }

// GetDeployments returns ApplicationEnvironmentRef.Deployments, and is useful for accessing the field via an interface.
func (v *ApplicationEnvironmentRef) GetDeployments() []*ApplicationDeploymentRef {
	return v.Deployments
}

// GetRiskStatus returns ApplicationEnvironmentRef.RiskStatus, and is useful for accessing the field via an interface.
func (v *ApplicationEnvironmentRef) GetRiskStatus() *ApplicationRiskStatusRef { return v.RiskStatus }

// GetMetadata returns ApplicationEnvironmentRef.Metadata, and is useful for accessing the field via an interface.
func (v *ApplicationEnvironmentRef) GetMetadata() []*KeyValueRef { return v.Metadata }

type ApplicationRef struct {
	// id is randomly assigned
	Id                 string                       `json:"id"`
	Name               string                       `json:"name"`
	Roles              []*RoleRef                   `json:"roles,omitempty"`
	Environments       []*ApplicationEnvironmentRef `json:"environments,omitempty"`
	Team               *TeamRef                     `json:"team,omitempty"`
	Policies           []*PolicyDefinitionRef       `json:"policies,omitempty"`
	PolicyEnforcements []*PolicyEnforcementRef      `json:"policyEnforcements,omitempty"`
	Metadata           []*KeyValueRef               `json:"metadata,omitempty"`
}

// GetId returns ApplicationRef.Id, and is useful for accessing the field via an interface.
func (v *ApplicationRef) GetId() string { return v.Id }

// GetName returns ApplicationRef.Name, and is useful for accessing the field via an interface.
func (v *ApplicationRef) GetName() string { return v.Name }

// GetRoles returns ApplicationRef.Roles, and is useful for accessing the field via an interface.
func (v *ApplicationRef) GetRoles() []*RoleRef { return v.Roles }

// GetEnvironments returns ApplicationRef.Environments, and is useful for accessing the field via an interface.
func (v *ApplicationRef) GetEnvironments() []*ApplicationEnvironmentRef { return v.Environments }

// GetTeam returns ApplicationRef.Team, and is useful for accessing the field via an interface.
func (v *ApplicationRef) GetTeam() *TeamRef { return v.Team }

// GetPolicies returns ApplicationRef.Policies, and is useful for accessing the field via an interface.
func (v *ApplicationRef) GetPolicies() []*PolicyDefinitionRef { return v.Policies }

// GetPolicyEnforcements returns ApplicationRef.PolicyEnforcements, and is useful for accessing the field via an interface.
func (v *ApplicationRef) GetPolicyEnforcements() []*PolicyEnforcementRef { return v.PolicyEnforcements }

// GetMetadata returns ApplicationRef.Metadata, and is useful for accessing the field via an interface.
func (v *ApplicationRef) GetMetadata() []*KeyValueRef { return v.Metadata }

type ApplicationRiskStatusRef struct {
	Id                     *string                    `json:"id"`
	RiskStatus             RiskStatus                 `json:"riskStatus"`
	SourceCodeAlerts       *int                       `json:"sourceCodeAlerts"`
	BuildAlerts            *int                       `json:"buildAlerts"`
	ArtifactAlerts         *int                       `json:"artifactAlerts"`
	DeploymentAlerts       *int                       `json:"deploymentAlerts"`
	CreatedAt              *time.Time                 `json:"createdAt"`
	UpdatedAt              *time.Time                 `json:"updatedAt"`
	ApplicationEnvironment *ApplicationEnvironmentRef `json:"applicationEnvironment,omitempty"`
}

// GetId returns ApplicationRiskStatusRef.Id, and is useful for accessing the field via an interface.
func (v *ApplicationRiskStatusRef) GetId() *string { return v.Id }

// GetRiskStatus returns ApplicationRiskStatusRef.RiskStatus, and is useful for accessing the field via an interface.
func (v *ApplicationRiskStatusRef) GetRiskStatus() RiskStatus { return v.RiskStatus }

// GetSourceCodeAlerts returns ApplicationRiskStatusRef.SourceCodeAlerts, and is useful for accessing the field via an interface.
func (v *ApplicationRiskStatusRef) GetSourceCodeAlerts() *int { return v.SourceCodeAlerts }

// GetBuildAlerts returns ApplicationRiskStatusRef.BuildAlerts, and is useful for accessing the field via an interface.
func (v *ApplicationRiskStatusRef) GetBuildAlerts() *int { return v.BuildAlerts }

// GetArtifactAlerts returns ApplicationRiskStatusRef.ArtifactAlerts, and is useful for accessing the field via an interface.
func (v *ApplicationRiskStatusRef) GetArtifactAlerts() *int { return v.ArtifactAlerts }

// GetDeploymentAlerts returns ApplicationRiskStatusRef.DeploymentAlerts, and is useful for accessing the field via an interface.
func (v *ApplicationRiskStatusRef) GetDeploymentAlerts() *int { return v.DeploymentAlerts }

// GetCreatedAt returns ApplicationRiskStatusRef.CreatedAt, and is useful for accessing the field via an interface.
func (v *ApplicationRiskStatusRef) GetCreatedAt() *time.Time { return v.CreatedAt }

// GetUpdatedAt returns ApplicationRiskStatusRef.UpdatedAt, and is useful for accessing the field via an interface.
func (v *ApplicationRiskStatusRef) GetUpdatedAt() *time.Time { return v.UpdatedAt }

// GetApplicationEnvironment returns ApplicationRiskStatusRef.ApplicationEnvironment, and is useful for accessing the field via an interface.
func (v *ApplicationRiskStatusRef) GetApplicationEnvironment() *ApplicationEnvironmentRef {
	return v.ApplicationEnvironment
}

type ArtifactRef struct {
	Id                 string                      `json:"id"`
	ArtifactType       string                      `json:"artifactType"`
	ArtifactName       string                      `json:"artifactName"`
	ArtifactTag        string                      `json:"artifactTag"`
	ArtifactSha        string                      `json:"artifactSha"`
	ScanData           []*ArtifactScanDataRef      `json:"scanData,omitempty"`
	ArtifactDeployment []*ApplicationDeploymentRef `json:"artifactDeployment,omitempty"`
	BuildDetails       *BuildToolRef               `json:"buildDetails,omitempty"`
}

// GetId returns ArtifactRef.Id, and is useful for accessing the field via an interface.
func (v *ArtifactRef) GetId() string { return v.Id }

// GetArtifactType returns ArtifactRef.ArtifactType, and is useful for accessing the field via an interface.
func (v *ArtifactRef) GetArtifactType() string { return v.ArtifactType }

// GetArtifactName returns ArtifactRef.ArtifactName, and is useful for accessing the field via an interface.
func (v *ArtifactRef) GetArtifactName() string { return v.ArtifactName }

// GetArtifactTag returns ArtifactRef.ArtifactTag, and is useful for accessing the field via an interface.
func (v *ArtifactRef) GetArtifactTag() string { return v.ArtifactTag }

// GetArtifactSha returns ArtifactRef.ArtifactSha, and is useful for accessing the field via an interface.
func (v *ArtifactRef) GetArtifactSha() string { return v.ArtifactSha }

// GetScanData returns ArtifactRef.ScanData, and is useful for accessing the field via an interface.
func (v *ArtifactRef) GetScanData() []*ArtifactScanDataRef { return v.ScanData }

// GetArtifactDeployment returns ArtifactRef.ArtifactDeployment, and is useful for accessing the field via an interface.
func (v *ArtifactRef) GetArtifactDeployment() []*ApplicationDeploymentRef {
	return v.ArtifactDeployment
}

// GetBuildDetails returns ArtifactRef.BuildDetails, and is useful for accessing the field via an interface.
func (v *ArtifactRef) GetBuildDetails() *BuildToolRef { return v.BuildDetails }

type ArtifactScanDataRef struct {
	Id                                 string           `json:"id"`
	ArtifactSha                        string           `json:"artifactSha"`
	Tool                               string           `json:"tool"`
	ArtifactDetails                    *ArtifactRef     `json:"artifactDetails,omitempty"`
	LastScannedAt                      *time.Time       `json:"lastScannedAt"`
	CreatedAt                          *time.Time       `json:"createdAt"`
	VulnTrackingId                     string           `json:"vulnTrackingId"`
	Components                         []*ComponentRef  `json:"components,omitempty"`
	VulnCriticalCount                  *int             `json:"vulnCriticalCount"`
	VulnHighCount                      *int             `json:"vulnHighCount"`
	VulnMediumCount                    *int             `json:"vulnMediumCount"`
	VulnLowCount                       *int             `json:"vulnLowCount"`
	VulnInfoCount                      *int             `json:"vulnInfoCount"`
	VulnUnknownCount                   *int             `json:"vulnUnknownCount"`
	VulnNoneCount                      *int             `json:"vulnNoneCount"`
	VulnTotalCount                     *int             `json:"vulnTotalCount"`
	SbomUrl                            string           `json:"sbomUrl"`
	ArtifactLicenseScanUrl             string           `json:"artifactLicenseScanUrl"`
	ArtifactSecretScanUrl              string           `json:"artifactSecretScanUrl"`
	SourceLicenseScanUrl               string           `json:"sourceLicenseScanUrl"`
	SourceSecretScanUrl                string           `json:"sourceSecretScanUrl"`
	SourceScorecardScanUrl             string           `json:"sourceScorecardScanUrl"`
	SourceSemgrepHighSeverityScanUrl   string           `json:"sourceSemgrepHighSeverityScanUrl"`
	SourceSemgrepMediumSeverityScanUrl string           `json:"sourceSemgrepMediumSeverityScanUrl"`
	SourceSemgrepLowSeverityScanUrl    string           `json:"sourceSemgrepLowSeverityScanUrl"`
	SourceSnykScanUrl                  string           `json:"sourceSnykScanUrl"`
	VirusTotalUrlScan                  string           `json:"virusTotalUrlScan"`
	RiskStatus                         RiskStatus       `json:"riskStatus"`
	ArtifactRunHistory                 []*RunHistoryRef `json:"artifactRunHistory,omitempty"`
}

// GetId returns ArtifactScanDataRef.Id, and is useful for accessing the field via an interface.
func (v *ArtifactScanDataRef) GetId() string { return v.Id }

// GetArtifactSha returns ArtifactScanDataRef.ArtifactSha, and is useful for accessing the field via an interface.
func (v *ArtifactScanDataRef) GetArtifactSha() string { return v.ArtifactSha }

// GetTool returns ArtifactScanDataRef.Tool, and is useful for accessing the field via an interface.
func (v *ArtifactScanDataRef) GetTool() string { return v.Tool }

// GetArtifactDetails returns ArtifactScanDataRef.ArtifactDetails, and is useful for accessing the field via an interface.
func (v *ArtifactScanDataRef) GetArtifactDetails() *ArtifactRef { return v.ArtifactDetails }

// GetLastScannedAt returns ArtifactScanDataRef.LastScannedAt, and is useful for accessing the field via an interface.
func (v *ArtifactScanDataRef) GetLastScannedAt() *time.Time { return v.LastScannedAt }

// GetCreatedAt returns ArtifactScanDataRef.CreatedAt, and is useful for accessing the field via an interface.
func (v *ArtifactScanDataRef) GetCreatedAt() *time.Time { return v.CreatedAt }

// GetVulnTrackingId returns ArtifactScanDataRef.VulnTrackingId, and is useful for accessing the field via an interface.
func (v *ArtifactScanDataRef) GetVulnTrackingId() string { return v.VulnTrackingId }

// GetComponents returns ArtifactScanDataRef.Components, and is useful for accessing the field via an interface.
func (v *ArtifactScanDataRef) GetComponents() []*ComponentRef { return v.Components }

// GetVulnCriticalCount returns ArtifactScanDataRef.VulnCriticalCount, and is useful for accessing the field via an interface.
func (v *ArtifactScanDataRef) GetVulnCriticalCount() *int { return v.VulnCriticalCount }

// GetVulnHighCount returns ArtifactScanDataRef.VulnHighCount, and is useful for accessing the field via an interface.
func (v *ArtifactScanDataRef) GetVulnHighCount() *int { return v.VulnHighCount }

// GetVulnMediumCount returns ArtifactScanDataRef.VulnMediumCount, and is useful for accessing the field via an interface.
func (v *ArtifactScanDataRef) GetVulnMediumCount() *int { return v.VulnMediumCount }

// GetVulnLowCount returns ArtifactScanDataRef.VulnLowCount, and is useful for accessing the field via an interface.
func (v *ArtifactScanDataRef) GetVulnLowCount() *int { return v.VulnLowCount }

// GetVulnInfoCount returns ArtifactScanDataRef.VulnInfoCount, and is useful for accessing the field via an interface.
func (v *ArtifactScanDataRef) GetVulnInfoCount() *int { return v.VulnInfoCount }

// GetVulnUnknownCount returns ArtifactScanDataRef.VulnUnknownCount, and is useful for accessing the field via an interface.
func (v *ArtifactScanDataRef) GetVulnUnknownCount() *int { return v.VulnUnknownCount }

// GetVulnNoneCount returns ArtifactScanDataRef.VulnNoneCount, and is useful for accessing the field via an interface.
func (v *ArtifactScanDataRef) GetVulnNoneCount() *int { return v.VulnNoneCount }

// GetVulnTotalCount returns ArtifactScanDataRef.VulnTotalCount, and is useful for accessing the field via an interface.
func (v *ArtifactScanDataRef) GetVulnTotalCount() *int { return v.VulnTotalCount }

// GetSbomUrl returns ArtifactScanDataRef.SbomUrl, and is useful for accessing the field via an interface.
func (v *ArtifactScanDataRef) GetSbomUrl() string { return v.SbomUrl }

// GetArtifactLicenseScanUrl returns ArtifactScanDataRef.ArtifactLicenseScanUrl, and is useful for accessing the field via an interface.
func (v *ArtifactScanDataRef) GetArtifactLicenseScanUrl() string { return v.ArtifactLicenseScanUrl }

// GetArtifactSecretScanUrl returns ArtifactScanDataRef.ArtifactSecretScanUrl, and is useful for accessing the field via an interface.
func (v *ArtifactScanDataRef) GetArtifactSecretScanUrl() string { return v.ArtifactSecretScanUrl }

// GetSourceLicenseScanUrl returns ArtifactScanDataRef.SourceLicenseScanUrl, and is useful for accessing the field via an interface.
func (v *ArtifactScanDataRef) GetSourceLicenseScanUrl() string { return v.SourceLicenseScanUrl }

// GetSourceSecretScanUrl returns ArtifactScanDataRef.SourceSecretScanUrl, and is useful for accessing the field via an interface.
func (v *ArtifactScanDataRef) GetSourceSecretScanUrl() string { return v.SourceSecretScanUrl }

// GetSourceScorecardScanUrl returns ArtifactScanDataRef.SourceScorecardScanUrl, and is useful for accessing the field via an interface.
func (v *ArtifactScanDataRef) GetSourceScorecardScanUrl() string { return v.SourceScorecardScanUrl }

// GetSourceSemgrepHighSeverityScanUrl returns ArtifactScanDataRef.SourceSemgrepHighSeverityScanUrl, and is useful for accessing the field via an interface.
func (v *ArtifactScanDataRef) GetSourceSemgrepHighSeverityScanUrl() string {
	return v.SourceSemgrepHighSeverityScanUrl
}

// GetSourceSemgrepMediumSeverityScanUrl returns ArtifactScanDataRef.SourceSemgrepMediumSeverityScanUrl, and is useful for accessing the field via an interface.
func (v *ArtifactScanDataRef) GetSourceSemgrepMediumSeverityScanUrl() string {
	return v.SourceSemgrepMediumSeverityScanUrl
}

// GetSourceSemgrepLowSeverityScanUrl returns ArtifactScanDataRef.SourceSemgrepLowSeverityScanUrl, and is useful for accessing the field via an interface.
func (v *ArtifactScanDataRef) GetSourceSemgrepLowSeverityScanUrl() string {
	return v.SourceSemgrepLowSeverityScanUrl
}

// GetSourceSnykScanUrl returns ArtifactScanDataRef.SourceSnykScanUrl, and is useful for accessing the field via an interface.
func (v *ArtifactScanDataRef) GetSourceSnykScanUrl() string { return v.SourceSnykScanUrl }

// GetVirusTotalUrlScan returns ArtifactScanDataRef.VirusTotalUrlScan, and is useful for accessing the field via an interface.
func (v *ArtifactScanDataRef) GetVirusTotalUrlScan() string { return v.VirusTotalUrlScan }

// GetRiskStatus returns ArtifactScanDataRef.RiskStatus, and is useful for accessing the field via an interface.
func (v *ArtifactScanDataRef) GetRiskStatus() RiskStatus { return v.RiskStatus }

// GetArtifactRunHistory returns ArtifactScanDataRef.ArtifactRunHistory, and is useful for accessing the field via an interface.
func (v *ArtifactScanDataRef) GetArtifactRunHistory() []*RunHistoryRef { return v.ArtifactRunHistory }

type BuildToolRef struct {
	// id is randomly assigned
	Id string `json:"id"`
	// buildId is a unique job id, run id for a job/pipeline/action
	BuildId string `json:"buildId"`
	// tool is jenkins etc
	Tool string `json:"tool"`
	// buildName is the name of the job/pipeline/action
	BuildName    string `json:"buildName"`
	BuildUrl     string `json:"buildUrl"`
	ArtifactType string `json:"artifactType"`
	// artifact would be something like nginx without the tag
	Artifact string `json:"artifact"`
	// artifactTag would be the tag of the artifact
	ArtifactTag string `json:"artifactTag"`
	// digest is the sha of the artifact
	Digest string `json:"digest"`
	// buildDigest is the sha of the artifact as sent from the build tool
	BuildDigest  string       `json:"buildDigest"`
	ArtifactNode *ArtifactRef `json:"artifactNode,omitempty"`
	// buildTime is the time at which the artifact was built
	BuildTime *time.Time `json:"buildTime"`
	// buildUser is the user that built the artifact
	BuildUser      string               `json:"buildUser"`
	SourceCodeTool *SourceCodeToolRef   `json:"sourceCodeTool,omitempty"`
	CommitMetaData []*CommitMetaDataRef `json:"commitMetaData,omitempty"`
	CreatedAt      *time.Time           `json:"createdAt"`
}

// GetId returns BuildToolRef.Id, and is useful for accessing the field via an interface.
func (v *BuildToolRef) GetId() string { return v.Id }

// GetBuildId returns BuildToolRef.BuildId, and is useful for accessing the field via an interface.
func (v *BuildToolRef) GetBuildId() string { return v.BuildId }

// GetTool returns BuildToolRef.Tool, and is useful for accessing the field via an interface.
func (v *BuildToolRef) GetTool() string { return v.Tool }

// GetBuildName returns BuildToolRef.BuildName, and is useful for accessing the field via an interface.
func (v *BuildToolRef) GetBuildName() string { return v.BuildName }

// GetBuildUrl returns BuildToolRef.BuildUrl, and is useful for accessing the field via an interface.
func (v *BuildToolRef) GetBuildUrl() string { return v.BuildUrl }

// GetArtifactType returns BuildToolRef.ArtifactType, and is useful for accessing the field via an interface.
func (v *BuildToolRef) GetArtifactType() string { return v.ArtifactType }

// GetArtifact returns BuildToolRef.Artifact, and is useful for accessing the field via an interface.
func (v *BuildToolRef) GetArtifact() string { return v.Artifact }

// GetArtifactTag returns BuildToolRef.ArtifactTag, and is useful for accessing the field via an interface.
func (v *BuildToolRef) GetArtifactTag() string { return v.ArtifactTag }

// GetDigest returns BuildToolRef.Digest, and is useful for accessing the field via an interface.
func (v *BuildToolRef) GetDigest() string { return v.Digest }

// GetBuildDigest returns BuildToolRef.BuildDigest, and is useful for accessing the field via an interface.
func (v *BuildToolRef) GetBuildDigest() string { return v.BuildDigest }

// GetArtifactNode returns BuildToolRef.ArtifactNode, and is useful for accessing the field via an interface.
func (v *BuildToolRef) GetArtifactNode() *ArtifactRef { return v.ArtifactNode }

// GetBuildTime returns BuildToolRef.BuildTime, and is useful for accessing the field via an interface.
func (v *BuildToolRef) GetBuildTime() *time.Time { return v.BuildTime }

// GetBuildUser returns BuildToolRef.BuildUser, and is useful for accessing the field via an interface.
func (v *BuildToolRef) GetBuildUser() string { return v.BuildUser }

// GetSourceCodeTool returns BuildToolRef.SourceCodeTool, and is useful for accessing the field via an interface.
func (v *BuildToolRef) GetSourceCodeTool() *SourceCodeToolRef { return v.SourceCodeTool }

// GetCommitMetaData returns BuildToolRef.CommitMetaData, and is useful for accessing the field via an interface.
func (v *BuildToolRef) GetCommitMetaData() []*CommitMetaDataRef { return v.CommitMetaData }

// GetCreatedAt returns BuildToolRef.CreatedAt, and is useful for accessing the field via an interface.
func (v *BuildToolRef) GetCreatedAt() *time.Time { return v.CreatedAt }

type CWERef struct {
	Id          string `json:"id"`
	Name        string `json:"name"`
	Description string `json:"description"`
}

// GetId returns CWERef.Id, and is useful for accessing the field via an interface.
func (v *CWERef) GetId() string { return v.Id }

// GetName returns CWERef.Name, and is useful for accessing the field via an interface.
func (v *CWERef) GetName() string { return v.Name }

// GetDescription returns CWERef.Description, and is useful for accessing the field via an interface.
func (v *CWERef) GetDescription() string { return v.Description }

type CommitMetaDataRef struct {
	// id is randomly assigned
	Id *string `json:"id"`
	// commit is a git commit that was used to build an artifact
	Commit     string `json:"commit"`
	Repository string `json:"repository"`
	// commitSign tells us whether the commit is signed
	CommitSign        *bool         `json:"commitSign"`
	NoOfReviewersConf *int          `json:"noOfReviewersConf"`
	ReviewerList      []string      `json:"reviewerList"`
	ApproverList      []string      `json:"approverList"`
	BuildTool         *BuildToolRef `json:"buildTool,omitempty"`
}

// GetId returns CommitMetaDataRef.Id, and is useful for accessing the field via an interface.
func (v *CommitMetaDataRef) GetId() *string { return v.Id }

// GetCommit returns CommitMetaDataRef.Commit, and is useful for accessing the field via an interface.
func (v *CommitMetaDataRef) GetCommit() string { return v.Commit }

// GetRepository returns CommitMetaDataRef.Repository, and is useful for accessing the field via an interface.
func (v *CommitMetaDataRef) GetRepository() string { return v.Repository }

// GetCommitSign returns CommitMetaDataRef.CommitSign, and is useful for accessing the field via an interface.
func (v *CommitMetaDataRef) GetCommitSign() *bool { return v.CommitSign }

// GetNoOfReviewersConf returns CommitMetaDataRef.NoOfReviewersConf, and is useful for accessing the field via an interface.
func (v *CommitMetaDataRef) GetNoOfReviewersConf() *int { return v.NoOfReviewersConf }

// GetReviewerList returns CommitMetaDataRef.ReviewerList, and is useful for accessing the field via an interface.
func (v *CommitMetaDataRef) GetReviewerList() []string { return v.ReviewerList }

// GetApproverList returns CommitMetaDataRef.ApproverList, and is useful for accessing the field via an interface.
func (v *CommitMetaDataRef) GetApproverList() []string { return v.ApproverList }

// GetBuildTool returns CommitMetaDataRef.BuildTool, and is useful for accessing the field via an interface.
func (v *CommitMetaDataRef) GetBuildTool() *BuildToolRef { return v.BuildTool }

type ComponentRef struct {
	Id              string                 `json:"id"`
	Type            string                 `json:"type"`
	Name            string                 `json:"name"`
	Version         string                 `json:"version"`
	Licenses        []string               `json:"licenses"`
	Purl            string                 `json:"purl"`
	Cpe             string                 `json:"cpe"`
	ScannedAt       *time.Time             `json:"scannedAt"`
	Vulnerabilities []*VulnerabilityRef    `json:"vulnerabilities,omitempty"`
	Artifacts       []*ArtifactScanDataRef `json:"artifacts,omitempty"`
}

// GetId returns ComponentRef.Id, and is useful for accessing the field via an interface.
func (v *ComponentRef) GetId() string { return v.Id }

// GetType returns ComponentRef.Type, and is useful for accessing the field via an interface.
func (v *ComponentRef) GetType() string { return v.Type }

// GetName returns ComponentRef.Name, and is useful for accessing the field via an interface.
func (v *ComponentRef) GetName() string { return v.Name }

// GetVersion returns ComponentRef.Version, and is useful for accessing the field via an interface.
func (v *ComponentRef) GetVersion() string { return v.Version }

// GetLicenses returns ComponentRef.Licenses, and is useful for accessing the field via an interface.
func (v *ComponentRef) GetLicenses() []string { return v.Licenses }

// GetPurl returns ComponentRef.Purl, and is useful for accessing the field via an interface.
func (v *ComponentRef) GetPurl() string { return v.Purl }

// GetCpe returns ComponentRef.Cpe, and is useful for accessing the field via an interface.
func (v *ComponentRef) GetCpe() string { return v.Cpe }

// GetScannedAt returns ComponentRef.ScannedAt, and is useful for accessing the field via an interface.
func (v *ComponentRef) GetScannedAt() *time.Time { return v.ScannedAt }

// GetVulnerabilities returns ComponentRef.Vulnerabilities, and is useful for accessing the field via an interface.
func (v *ComponentRef) GetVulnerabilities() []*VulnerabilityRef { return v.Vulnerabilities }

// GetArtifacts returns ComponentRef.Artifacts, and is useful for accessing the field via an interface.
func (v *ComponentRef) GetArtifacts() []*ArtifactScanDataRef { return v.Artifacts }

type CredentialsRef struct {
	Id         *string        `json:"id"`
	Data       string         `json:"data"`
	Integrator *IntegratorRef `json:"integrator,omitempty"`
}

// GetId returns CredentialsRef.Id, and is useful for accessing the field via an interface.
func (v *CredentialsRef) GetId() *string { return v.Id }

// GetData returns CredentialsRef.Data, and is useful for accessing the field via an interface.
func (v *CredentialsRef) GetData() string { return v.Data }

// GetIntegrator returns CredentialsRef.Integrator, and is useful for accessing the field via an interface.
func (v *CredentialsRef) GetIntegrator() *IntegratorRef { return v.Integrator }

// DeploymentStage is an enum denoting the stage of the deployment. .
type DeploymentStage string

const (
	// deployment is discovered from the events
	DeploymentStageDiscovered DeploymentStage = "discovered"
	// scanning is under process
	DeploymentStageScanning DeploymentStage = "scanning"
	// deployment is known to have passed the deployment firewall and the deployment(ie the artifact) is live
	DeploymentStageCurrent DeploymentStage = "current"
	// deployment becomes a past deployment because another fresh deployment has happened
	DeploymentStagePrevious DeploymentStage = "previous"
	// deployment is blocked by the firewall
	DeploymentStageBlocked DeploymentStage = "blocked"
)

type DeploymentTargetRef struct {
	// id is randomly assigned
	Id   string `json:"id"`
	Name string `json:"name"`
	// this would be the ip/server address of the target environment
	Ip      string `json:"ip"`
	Account string `json:"account"`
	// this would be something like aws, gcp etc
	TargetType string `json:"targetType"`
	// this would be something like us-east-1 etc
	Region                    string           `json:"region"`
	KubescapeServiceConnected string           `json:"kubescapeServiceConnected"`
	IsFirewall                *bool            `json:"isFirewall"`
	Organization              *OrganizationRef `json:"organization,omitempty"`
	DefaultEnvironment        *EnvironmentRef  `json:"defaultEnvironment,omitempty"`
}

// GetId returns DeploymentTargetRef.Id, and is useful for accessing the field via an interface.
func (v *DeploymentTargetRef) GetId() string { return v.Id }

// GetName returns DeploymentTargetRef.Name, and is useful for accessing the field via an interface.
func (v *DeploymentTargetRef) GetName() string { return v.Name }

// GetIp returns DeploymentTargetRef.Ip, and is useful for accessing the field via an interface.
func (v *DeploymentTargetRef) GetIp() string { return v.Ip }

// GetAccount returns DeploymentTargetRef.Account, and is useful for accessing the field via an interface.
func (v *DeploymentTargetRef) GetAccount() string { return v.Account }

// GetTargetType returns DeploymentTargetRef.TargetType, and is useful for accessing the field via an interface.
func (v *DeploymentTargetRef) GetTargetType() string { return v.TargetType }

// GetRegion returns DeploymentTargetRef.Region, and is useful for accessing the field via an interface.
func (v *DeploymentTargetRef) GetRegion() string { return v.Region }

// GetKubescapeServiceConnected returns DeploymentTargetRef.KubescapeServiceConnected, and is useful for accessing the field via an interface.
func (v *DeploymentTargetRef) GetKubescapeServiceConnected() string {
	return v.KubescapeServiceConnected
}

// GetIsFirewall returns DeploymentTargetRef.IsFirewall, and is useful for accessing the field via an interface.
func (v *DeploymentTargetRef) GetIsFirewall() *bool { return v.IsFirewall }

// GetOrganization returns DeploymentTargetRef.Organization, and is useful for accessing the field via an interface.
func (v *DeploymentTargetRef) GetOrganization() *OrganizationRef { return v.Organization }

// GetDefaultEnvironment returns DeploymentTargetRef.DefaultEnvironment, and is useful for accessing the field via an interface.
func (v *DeploymentTargetRef) GetDefaultEnvironment() *EnvironmentRef { return v.DefaultEnvironment }

type EnvironmentRef struct {
	Id           string           `json:"id"`
	Organization *OrganizationRef `json:"organization,omitempty"`
	Purpose      string           `json:"purpose"`
}

// GetId returns EnvironmentRef.Id, and is useful for accessing the field via an interface.
func (v *EnvironmentRef) GetId() string { return v.Id }

// GetOrganization returns EnvironmentRef.Organization, and is useful for accessing the field via an interface.
func (v *EnvironmentRef) GetOrganization() *OrganizationRef { return v.Organization }

// GetPurpose returns EnvironmentRef.Purpose, and is useful for accessing the field via an interface.
func (v *EnvironmentRef) GetPurpose() string { return v.Purpose }

type FeatureModeRef struct {
	Id           string           `json:"id"`
	Organization *OrganizationRef `json:"organization,omitempty"`
	Scan         string           `json:"scan"`
	Type         string           `json:"type"`
	Enabled      *bool            `json:"enabled"`
	Category     string           `json:"category"`
	CreatedAt    *time.Time       `json:"createdAt"`
	UpdatedAt    *time.Time       `json:"updatedAt"`
}

// GetId returns FeatureModeRef.Id, and is useful for accessing the field via an interface.
func (v *FeatureModeRef) GetId() string { return v.Id }

// GetOrganization returns FeatureModeRef.Organization, and is useful for accessing the field via an interface.
func (v *FeatureModeRef) GetOrganization() *OrganizationRef { return v.Organization }

// GetScan returns FeatureModeRef.Scan, and is useful for accessing the field via an interface.
func (v *FeatureModeRef) GetScan() string { return v.Scan }

// GetType returns FeatureModeRef.Type, and is useful for accessing the field via an interface.
func (v *FeatureModeRef) GetType() string { return v.Type }

// GetEnabled returns FeatureModeRef.Enabled, and is useful for accessing the field via an interface.
func (v *FeatureModeRef) GetEnabled() *bool { return v.Enabled }

// GetCategory returns FeatureModeRef.Category, and is useful for accessing the field via an interface.
func (v *FeatureModeRef) GetCategory() string { return v.Category }

// GetCreatedAt returns FeatureModeRef.CreatedAt, and is useful for accessing the field via an interface.
func (v *FeatureModeRef) GetCreatedAt() *time.Time { return v.CreatedAt }

// GetUpdatedAt returns FeatureModeRef.UpdatedAt, and is useful for accessing the field via an interface.
func (v *FeatureModeRef) GetUpdatedAt() *time.Time { return v.UpdatedAt }

type IntegratorRef struct {
	Id           string           `json:"id"`
	Organization *OrganizationRef `json:"organization,omitempty"`
	Name         string           `json:"name"`
	Type         string           `json:"type"`
	Category     string           `json:"category"`
	Credentials  *CredentialsRef  `json:"credentials,omitempty"`
	CreatedAt    *time.Time       `json:"createdAt"`
	UpdatedAt    *time.Time       `json:"updatedAt"`
}

// GetId returns IntegratorRef.Id, and is useful for accessing the field via an interface.
func (v *IntegratorRef) GetId() string { return v.Id }

// GetOrganization returns IntegratorRef.Organization, and is useful for accessing the field via an interface.
func (v *IntegratorRef) GetOrganization() *OrganizationRef { return v.Organization }

// GetName returns IntegratorRef.Name, and is useful for accessing the field via an interface.
func (v *IntegratorRef) GetName() string { return v.Name }

// GetType returns IntegratorRef.Type, and is useful for accessing the field via an interface.
func (v *IntegratorRef) GetType() string { return v.Type }

// GetCategory returns IntegratorRef.Category, and is useful for accessing the field via an interface.
func (v *IntegratorRef) GetCategory() string { return v.Category }

// GetCredentials returns IntegratorRef.Credentials, and is useful for accessing the field via an interface.
func (v *IntegratorRef) GetCredentials() *CredentialsRef { return v.Credentials }

// GetCreatedAt returns IntegratorRef.CreatedAt, and is useful for accessing the field via an interface.
func (v *IntegratorRef) GetCreatedAt() *time.Time { return v.CreatedAt }

// GetUpdatedAt returns IntegratorRef.UpdatedAt, and is useful for accessing the field via an interface.
func (v *IntegratorRef) GetUpdatedAt() *time.Time { return v.UpdatedAt }

type KeyValueRef struct {
	Id    string `json:"id"`
	Name  string `json:"name"`
	Value string `json:"value"`
}

// GetId returns KeyValueRef.Id, and is useful for accessing the field via an interface.
func (v *KeyValueRef) GetId() string { return v.Id }

// GetName returns KeyValueRef.Name, and is useful for accessing the field via an interface.
func (v *KeyValueRef) GetName() string { return v.Name }

// GetValue returns KeyValueRef.Value, and is useful for accessing the field via an interface.
func (v *KeyValueRef) GetValue() string { return v.Value }

type OrganizationRef struct {
	// id is randomly assigned
	Id                 string                  `json:"id"`
	Name               string                  `json:"name"`
	Roles              []*RoleRef              `json:"roles,omitempty"`
	Teams              []*TeamRef              `json:"teams,omitempty"`
	Environments       []*DeploymentTargetRef  `json:"environments,omitempty"`
	Policies           []*PolicyDefinitionRef  `json:"policies,omitempty"`
	PolicyEnforcements []*PolicyEnforcementRef `json:"policyEnforcements,omitempty"`
	Integrators        []*IntegratorRef        `json:"integrators,omitempty"`
	FeatureModes       []*FeatureModeRef       `json:"featureModes,omitempty"`
}

// GetId returns OrganizationRef.Id, and is useful for accessing the field via an interface.
func (v *OrganizationRef) GetId() string { return v.Id }

// GetName returns OrganizationRef.Name, and is useful for accessing the field via an interface.
func (v *OrganizationRef) GetName() string { return v.Name }

// GetRoles returns OrganizationRef.Roles, and is useful for accessing the field via an interface.
func (v *OrganizationRef) GetRoles() []*RoleRef { return v.Roles }

// GetTeams returns OrganizationRef.Teams, and is useful for accessing the field via an interface.
func (v *OrganizationRef) GetTeams() []*TeamRef { return v.Teams }

// GetEnvironments returns OrganizationRef.Environments, and is useful for accessing the field via an interface.
func (v *OrganizationRef) GetEnvironments() []*DeploymentTargetRef { return v.Environments }

// GetPolicies returns OrganizationRef.Policies, and is useful for accessing the field via an interface.
func (v *OrganizationRef) GetPolicies() []*PolicyDefinitionRef { return v.Policies }

// GetPolicyEnforcements returns OrganizationRef.PolicyEnforcements, and is useful for accessing the field via an interface.
func (v *OrganizationRef) GetPolicyEnforcements() []*PolicyEnforcementRef {
	return v.PolicyEnforcements
}

// GetIntegrators returns OrganizationRef.Integrators, and is useful for accessing the field via an interface.
func (v *OrganizationRef) GetIntegrators() []*IntegratorRef { return v.Integrators }

// GetFeatureModes returns OrganizationRef.FeatureModes, and is useful for accessing the field via an interface.
func (v *OrganizationRef) GetFeatureModes() []*FeatureModeRef { return v.FeatureModes }

type PolicyDefinitionRef struct {
	Id               string           `json:"id"`
	OwnerOrg         *OrganizationRef `json:"ownerOrg,omitempty"`
	OwnerTeam        *TeamRef         `json:"ownerTeam,omitempty"`
	OwnerApplication *ApplicationRef  `json:"ownerApplication,omitempty"`
	CreatedAt        *time.Time       `json:"createdAt"`
	UpdatedAt        *time.Time       `json:"updatedAt"`
	PolicyName       string           `json:"policyName"`
	Category         string           `json:"category"`
	Stage            string           `json:"stage"`
	Description      string           `json:"description"`
	ScheduledPolicy  *bool            `json:"scheduledPolicy"`
	Script           string           `json:"script"`
	Variables        string           `json:"variables"`
	ConditionName    string           `json:"conditionName"`
	Suggestion       string           `json:"suggestion"`
}

// GetId returns PolicyDefinitionRef.Id, and is useful for accessing the field via an interface.
func (v *PolicyDefinitionRef) GetId() string { return v.Id }

// GetOwnerOrg returns PolicyDefinitionRef.OwnerOrg, and is useful for accessing the field via an interface.
func (v *PolicyDefinitionRef) GetOwnerOrg() *OrganizationRef { return v.OwnerOrg }

// GetOwnerTeam returns PolicyDefinitionRef.OwnerTeam, and is useful for accessing the field via an interface.
func (v *PolicyDefinitionRef) GetOwnerTeam() *TeamRef { return v.OwnerTeam }

// GetOwnerApplication returns PolicyDefinitionRef.OwnerApplication, and is useful for accessing the field via an interface.
func (v *PolicyDefinitionRef) GetOwnerApplication() *ApplicationRef { return v.OwnerApplication }

// GetCreatedAt returns PolicyDefinitionRef.CreatedAt, and is useful for accessing the field via an interface.
func (v *PolicyDefinitionRef) GetCreatedAt() *time.Time { return v.CreatedAt }

// GetUpdatedAt returns PolicyDefinitionRef.UpdatedAt, and is useful for accessing the field via an interface.
func (v *PolicyDefinitionRef) GetUpdatedAt() *time.Time { return v.UpdatedAt }

// GetPolicyName returns PolicyDefinitionRef.PolicyName, and is useful for accessing the field via an interface.
func (v *PolicyDefinitionRef) GetPolicyName() string { return v.PolicyName }

// GetCategory returns PolicyDefinitionRef.Category, and is useful for accessing the field via an interface.
func (v *PolicyDefinitionRef) GetCategory() string { return v.Category }

// GetStage returns PolicyDefinitionRef.Stage, and is useful for accessing the field via an interface.
func (v *PolicyDefinitionRef) GetStage() string { return v.Stage }

// GetDescription returns PolicyDefinitionRef.Description, and is useful for accessing the field via an interface.
func (v *PolicyDefinitionRef) GetDescription() string { return v.Description }

// GetScheduledPolicy returns PolicyDefinitionRef.ScheduledPolicy, and is useful for accessing the field via an interface.
func (v *PolicyDefinitionRef) GetScheduledPolicy() *bool { return v.ScheduledPolicy }

// GetScript returns PolicyDefinitionRef.Script, and is useful for accessing the field via an interface.
func (v *PolicyDefinitionRef) GetScript() string { return v.Script }

// GetVariables returns PolicyDefinitionRef.Variables, and is useful for accessing the field via an interface.
func (v *PolicyDefinitionRef) GetVariables() string { return v.Variables }

// GetConditionName returns PolicyDefinitionRef.ConditionName, and is useful for accessing the field via an interface.
func (v *PolicyDefinitionRef) GetConditionName() string { return v.ConditionName }

// GetSuggestion returns PolicyDefinitionRef.Suggestion, and is useful for accessing the field via an interface.
func (v *PolicyDefinitionRef) GetSuggestion() string { return v.Suggestion }

type PolicyEnforcementRef struct {
	Id                  *string              `json:"id"`
	Policy              *PolicyDefinitionRef `json:"policy,omitempty"`
	EnforcedOrg         *OrganizationRef     `json:"enforcedOrg,omitempty"`
	EnforcedTeam        *TeamRef             `json:"enforcedTeam,omitempty"`
	EnforcedApplication *ApplicationRef      `json:"enforcedApplication,omitempty"`
	Status              *bool                `json:"status"`
	ForceApply          *bool                `json:"forceApply"`
	Severity            Severity             `json:"severity"`
	DatasourceTool      string               `json:"datasourceTool"`
	Action              string               `json:"action"`
	ConditionValue      string               `json:"conditionValue"`
	Environments        []*EnvironmentRef    `json:"environments,omitempty"`
	Tags                []*TagRef            `json:"tags,omitempty"`
	CreatedAt           *time.Time           `json:"createdAt"`
	UpdatedAt           *time.Time           `json:"updatedAt"`
}

// GetId returns PolicyEnforcementRef.Id, and is useful for accessing the field via an interface.
func (v *PolicyEnforcementRef) GetId() *string { return v.Id }

// GetPolicy returns PolicyEnforcementRef.Policy, and is useful for accessing the field via an interface.
func (v *PolicyEnforcementRef) GetPolicy() *PolicyDefinitionRef { return v.Policy }

// GetEnforcedOrg returns PolicyEnforcementRef.EnforcedOrg, and is useful for accessing the field via an interface.
func (v *PolicyEnforcementRef) GetEnforcedOrg() *OrganizationRef { return v.EnforcedOrg }

// GetEnforcedTeam returns PolicyEnforcementRef.EnforcedTeam, and is useful for accessing the field via an interface.
func (v *PolicyEnforcementRef) GetEnforcedTeam() *TeamRef { return v.EnforcedTeam }

// GetEnforcedApplication returns PolicyEnforcementRef.EnforcedApplication, and is useful for accessing the field via an interface.
func (v *PolicyEnforcementRef) GetEnforcedApplication() *ApplicationRef { return v.EnforcedApplication }

// GetStatus returns PolicyEnforcementRef.Status, and is useful for accessing the field via an interface.
func (v *PolicyEnforcementRef) GetStatus() *bool { return v.Status }

// GetForceApply returns PolicyEnforcementRef.ForceApply, and is useful for accessing the field via an interface.
func (v *PolicyEnforcementRef) GetForceApply() *bool { return v.ForceApply }

// GetSeverity returns PolicyEnforcementRef.Severity, and is useful for accessing the field via an interface.
func (v *PolicyEnforcementRef) GetSeverity() Severity { return v.Severity }

// GetDatasourceTool returns PolicyEnforcementRef.DatasourceTool, and is useful for accessing the field via an interface.
func (v *PolicyEnforcementRef) GetDatasourceTool() string { return v.DatasourceTool }

// GetAction returns PolicyEnforcementRef.Action, and is useful for accessing the field via an interface.
func (v *PolicyEnforcementRef) GetAction() string { return v.Action }

// GetConditionValue returns PolicyEnforcementRef.ConditionValue, and is useful for accessing the field via an interface.
func (v *PolicyEnforcementRef) GetConditionValue() string { return v.ConditionValue }

// GetEnvironments returns PolicyEnforcementRef.Environments, and is useful for accessing the field via an interface.
func (v *PolicyEnforcementRef) GetEnvironments() []*EnvironmentRef { return v.Environments }

// GetTags returns PolicyEnforcementRef.Tags, and is useful for accessing the field via an interface.
func (v *PolicyEnforcementRef) GetTags() []*TagRef { return v.Tags }

// GetCreatedAt returns PolicyEnforcementRef.CreatedAt, and is useful for accessing the field via an interface.
func (v *PolicyEnforcementRef) GetCreatedAt() *time.Time { return v.CreatedAt }

// GetUpdatedAt returns PolicyEnforcementRef.UpdatedAt, and is useful for accessing the field via an interface.
func (v *PolicyEnforcementRef) GetUpdatedAt() *time.Time { return v.UpdatedAt }

// RiskStatus tells us what risk a current application instance or a deployment is at.
type RiskStatus string

const (
	RiskStatusLowrisk        RiskStatus = "lowrisk"
	RiskStatusMediumrisk     RiskStatus = "mediumrisk"
	RiskStatusHighrisk       RiskStatus = "highrisk"
	RiskStatusApocalypserisk RiskStatus = "apocalypserisk"
	RiskStatusScanning       RiskStatus = "scanning"
)

type RolePermission string

const (
	RolePermissionAdmin RolePermission = "admin"
	RolePermissionWrite RolePermission = "write"
	RolePermissionRead  RolePermission = "read"
)

type RoleRef struct {
	// id is randomly assigned
	Id string `json:"id"`
	// group should be a URI format that includes a scope or realm
	Group      string         `json:"group"`
	Permission RolePermission `json:"permission"`
}

// GetId returns RoleRef.Id, and is useful for accessing the field via an interface.
func (v *RoleRef) GetId() string { return v.Id }

// GetGroup returns RoleRef.Group, and is useful for accessing the field via an interface.
func (v *RoleRef) GetGroup() string { return v.Group }

// GetPermission returns RoleRef.Permission, and is useful for accessing the field via an interface.
func (v *RoleRef) GetPermission() RolePermission { return v.Permission }

type RunHistoryRef struct {
	Id                    *string                   `json:"id"`
	PolicyId              string                    `json:"policyId"`
	ApplicationDeployment *ApplicationDeploymentRef `json:"applicationDeployment,omitempty"`
	ArtifactScan          *ArtifactScanDataRef      `json:"artifactScan,omitempty"`
	PolicyName            string                    `json:"PolicyName"`
	Stage                 string                    `json:"Stage"`
	Artifact              string                    `json:"Artifact"`
	ArtifactTag           string                    `json:"ArtifactTag"`
	ArtifactSha           string                    `json:"ArtifactSha"`
	ArtifactNameTag       string                    `json:"ArtifactNameTag"`
	DatasourceTool        string                    `json:"DatasourceTool"`
	CreatedAt             *time.Time                `json:"CreatedAt"`
	UpdatedAt             *time.Time                `json:"UpdatedAt"`
	DeployedAt            *time.Time                `json:"DeployedAt"`
	Hash                  string                    `json:"Hash"`
	Pass                  *bool                     `json:"Pass"`
	MetaData              string                    `json:"MetaData"`
	FileApi               string                    `json:"FileApi"`
	ScheduledPolicy       *bool                     `json:"scheduledPolicy"`
	PolicyEnforcements    *PolicyEnforcementRef     `json:"policyEnforcements,omitempty"`
	SecurityIssue         *SecurityIssueRef         `json:"securityIssue,omitempty"`
}

// GetId returns RunHistoryRef.Id, and is useful for accessing the field via an interface.
func (v *RunHistoryRef) GetId() *string { return v.Id }

// GetPolicyId returns RunHistoryRef.PolicyId, and is useful for accessing the field via an interface.
func (v *RunHistoryRef) GetPolicyId() string { return v.PolicyId }

// GetApplicationDeployment returns RunHistoryRef.ApplicationDeployment, and is useful for accessing the field via an interface.
func (v *RunHistoryRef) GetApplicationDeployment() *ApplicationDeploymentRef {
	return v.ApplicationDeployment
}

// GetArtifactScan returns RunHistoryRef.ArtifactScan, and is useful for accessing the field via an interface.
func (v *RunHistoryRef) GetArtifactScan() *ArtifactScanDataRef { return v.ArtifactScan }

// GetPolicyName returns RunHistoryRef.PolicyName, and is useful for accessing the field via an interface.
func (v *RunHistoryRef) GetPolicyName() string { return v.PolicyName }

// GetStage returns RunHistoryRef.Stage, and is useful for accessing the field via an interface.
func (v *RunHistoryRef) GetStage() string { return v.Stage }

// GetArtifact returns RunHistoryRef.Artifact, and is useful for accessing the field via an interface.
func (v *RunHistoryRef) GetArtifact() string { return v.Artifact }

// GetArtifactTag returns RunHistoryRef.ArtifactTag, and is useful for accessing the field via an interface.
func (v *RunHistoryRef) GetArtifactTag() string { return v.ArtifactTag }

// GetArtifactSha returns RunHistoryRef.ArtifactSha, and is useful for accessing the field via an interface.
func (v *RunHistoryRef) GetArtifactSha() string { return v.ArtifactSha }

// GetArtifactNameTag returns RunHistoryRef.ArtifactNameTag, and is useful for accessing the field via an interface.
func (v *RunHistoryRef) GetArtifactNameTag() string { return v.ArtifactNameTag }

// GetDatasourceTool returns RunHistoryRef.DatasourceTool, and is useful for accessing the field via an interface.
func (v *RunHistoryRef) GetDatasourceTool() string { return v.DatasourceTool }

// GetCreatedAt returns RunHistoryRef.CreatedAt, and is useful for accessing the field via an interface.
func (v *RunHistoryRef) GetCreatedAt() *time.Time { return v.CreatedAt }

// GetUpdatedAt returns RunHistoryRef.UpdatedAt, and is useful for accessing the field via an interface.
func (v *RunHistoryRef) GetUpdatedAt() *time.Time { return v.UpdatedAt }

// GetDeployedAt returns RunHistoryRef.DeployedAt, and is useful for accessing the field via an interface.
func (v *RunHistoryRef) GetDeployedAt() *time.Time { return v.DeployedAt }

// GetHash returns RunHistoryRef.Hash, and is useful for accessing the field via an interface.
func (v *RunHistoryRef) GetHash() string { return v.Hash }

// GetPass returns RunHistoryRef.Pass, and is useful for accessing the field via an interface.
func (v *RunHistoryRef) GetPass() *bool { return v.Pass }

// GetMetaData returns RunHistoryRef.MetaData, and is useful for accessing the field via an interface.
func (v *RunHistoryRef) GetMetaData() string { return v.MetaData }

// GetFileApi returns RunHistoryRef.FileApi, and is useful for accessing the field via an interface.
func (v *RunHistoryRef) GetFileApi() string { return v.FileApi }

// GetScheduledPolicy returns RunHistoryRef.ScheduledPolicy, and is useful for accessing the field via an interface.
func (v *RunHistoryRef) GetScheduledPolicy() *bool { return v.ScheduledPolicy }

// GetPolicyEnforcements returns RunHistoryRef.PolicyEnforcements, and is useful for accessing the field via an interface.
func (v *RunHistoryRef) GetPolicyEnforcements() *PolicyEnforcementRef { return v.PolicyEnforcements }

// GetSecurityIssue returns RunHistoryRef.SecurityIssue, and is useful for accessing the field via an interface.
func (v *RunHistoryRef) GetSecurityIssue() *SecurityIssueRef { return v.SecurityIssue }

type SecurityIssueRef struct {
	Id           *string          `json:"id"`
	AlertTitle   string           `json:"AlertTitle"`
	AlertMessage string           `json:"AlertMessage"`
	Suggestions  string           `json:"Suggestions"`
	Severity     Severity         `json:"Severity"`
	CreatedAt    *time.Time       `json:"CreatedAt"`
	UpdatedAt    *time.Time       `json:"UpdatedAt"`
	Action       string           `json:"Action"`
	JiraUrl      string           `json:"JiraUrl"`
	Status       string           `json:"Status"`
	Reason       string           `json:"Reason"`
	Error        string           `json:"Error"`
	Affects      []*RunHistoryRef `json:"Affects,omitempty"`
}

// GetId returns SecurityIssueRef.Id, and is useful for accessing the field via an interface.
func (v *SecurityIssueRef) GetId() *string { return v.Id }

// GetAlertTitle returns SecurityIssueRef.AlertTitle, and is useful for accessing the field via an interface.
func (v *SecurityIssueRef) GetAlertTitle() string { return v.AlertTitle }

// GetAlertMessage returns SecurityIssueRef.AlertMessage, and is useful for accessing the field via an interface.
func (v *SecurityIssueRef) GetAlertMessage() string { return v.AlertMessage }

// GetSuggestions returns SecurityIssueRef.Suggestions, and is useful for accessing the field via an interface.
func (v *SecurityIssueRef) GetSuggestions() string { return v.Suggestions }

// GetSeverity returns SecurityIssueRef.Severity, and is useful for accessing the field via an interface.
func (v *SecurityIssueRef) GetSeverity() Severity { return v.Severity }

// GetCreatedAt returns SecurityIssueRef.CreatedAt, and is useful for accessing the field via an interface.
func (v *SecurityIssueRef) GetCreatedAt() *time.Time { return v.CreatedAt }

// GetUpdatedAt returns SecurityIssueRef.UpdatedAt, and is useful for accessing the field via an interface.
func (v *SecurityIssueRef) GetUpdatedAt() *time.Time { return v.UpdatedAt }

// GetAction returns SecurityIssueRef.Action, and is useful for accessing the field via an interface.
func (v *SecurityIssueRef) GetAction() string { return v.Action }

// GetJiraUrl returns SecurityIssueRef.JiraUrl, and is useful for accessing the field via an interface.
func (v *SecurityIssueRef) GetJiraUrl() string { return v.JiraUrl }

// GetStatus returns SecurityIssueRef.Status, and is useful for accessing the field via an interface.
func (v *SecurityIssueRef) GetStatus() string { return v.Status }

// GetReason returns SecurityIssueRef.Reason, and is useful for accessing the field via an interface.
func (v *SecurityIssueRef) GetReason() string { return v.Reason }

// GetError returns SecurityIssueRef.Error, and is useful for accessing the field via an interface.
func (v *SecurityIssueRef) GetError() string { return v.Error }

// GetAffects returns SecurityIssueRef.Affects, and is useful for accessing the field via an interface.
func (v *SecurityIssueRef) GetAffects() []*RunHistoryRef { return v.Affects }

type Severity string

const (
	SeverityCritical Severity = "critical"
	SeverityHigh     Severity = "high"
	SeverityMedium   Severity = "medium"
	SeverityLow      Severity = "low"
	SeverityInfo     Severity = "info"
	SeverityNone     Severity = "none"
	SeverityUnknown  Severity = "unknown"
)

type SourceCodeToolRef struct {
	// id is randomly assigned
	Id        string     `json:"id"`
	CreatedAt *time.Time `json:"createdAt"`
	// scm is the scm tool github/gitlab etc
	Scm string `json:"scm"`
	// repository is the git remote repository
	Repository string `json:"repository"`
	// branch is the git branch on which the artifact was built
	Branch string `json:"branch"`
	// headCommit is the checkout out head commit
	HeadCommit string `json:"headCommit"`
	// diffCommits is a comma separated string of the commits between the previous built artifact and the current
	DiffCommits  string `json:"diffCommits"`
	LicenseName  string `json:"licenseName"`
	Visibility   string `json:"visibility"`
	WorkflowName string `json:"workflowName"`
	// parentRepo is populated in case the git repo is a fork
	ParentRepo string        `json:"parentRepo"`
	BuildTool  *BuildToolRef `json:"buildTool,omitempty"`
}

// GetId returns SourceCodeToolRef.Id, and is useful for accessing the field via an interface.
func (v *SourceCodeToolRef) GetId() string { return v.Id }

// GetCreatedAt returns SourceCodeToolRef.CreatedAt, and is useful for accessing the field via an interface.
func (v *SourceCodeToolRef) GetCreatedAt() *time.Time { return v.CreatedAt }

// GetScm returns SourceCodeToolRef.Scm, and is useful for accessing the field via an interface.
func (v *SourceCodeToolRef) GetScm() string { return v.Scm }

// GetRepository returns SourceCodeToolRef.Repository, and is useful for accessing the field via an interface.
func (v *SourceCodeToolRef) GetRepository() string { return v.Repository }

// GetBranch returns SourceCodeToolRef.Branch, and is useful for accessing the field via an interface.
func (v *SourceCodeToolRef) GetBranch() string { return v.Branch }

// GetHeadCommit returns SourceCodeToolRef.HeadCommit, and is useful for accessing the field via an interface.
func (v *SourceCodeToolRef) GetHeadCommit() string { return v.HeadCommit }

// GetDiffCommits returns SourceCodeToolRef.DiffCommits, and is useful for accessing the field via an interface.
func (v *SourceCodeToolRef) GetDiffCommits() string { return v.DiffCommits }

// GetLicenseName returns SourceCodeToolRef.LicenseName, and is useful for accessing the field via an interface.
func (v *SourceCodeToolRef) GetLicenseName() string { return v.LicenseName }

// GetVisibility returns SourceCodeToolRef.Visibility, and is useful for accessing the field via an interface.
func (v *SourceCodeToolRef) GetVisibility() string { return v.Visibility }

// GetWorkflowName returns SourceCodeToolRef.WorkflowName, and is useful for accessing the field via an interface.
func (v *SourceCodeToolRef) GetWorkflowName() string { return v.WorkflowName }

// GetParentRepo returns SourceCodeToolRef.ParentRepo, and is useful for accessing the field via an interface.
func (v *SourceCodeToolRef) GetParentRepo() string { return v.ParentRepo }

// GetBuildTool returns SourceCodeToolRef.BuildTool, and is useful for accessing the field via an interface.
func (v *SourceCodeToolRef) GetBuildTool() *BuildToolRef { return v.BuildTool }

type TagRef struct {
	Id             string                  `json:"id"`
	TagName        string                  `json:"tagName"`
	TagValue       string                  `json:"tagValue"`
	TagDescription string                  `json:"tagDescription"`
	CreatedBy      string                  `json:"createdBy"`
	CreatedAt      *time.Time              `json:"createdAt"`
	UpdatedAt      *time.Time              `json:"updatedAt"`
	Policies       []*PolicyEnforcementRef `json:"policies,omitempty"`
}

// GetId returns TagRef.Id, and is useful for accessing the field via an interface.
func (v *TagRef) GetId() string { return v.Id }

// GetTagName returns TagRef.TagName, and is useful for accessing the field via an interface.
func (v *TagRef) GetTagName() string { return v.TagName }

// GetTagValue returns TagRef.TagValue, and is useful for accessing the field via an interface.
func (v *TagRef) GetTagValue() string { return v.TagValue }

// GetTagDescription returns TagRef.TagDescription, and is useful for accessing the field via an interface.
func (v *TagRef) GetTagDescription() string { return v.TagDescription }

// GetCreatedBy returns TagRef.CreatedBy, and is useful for accessing the field via an interface.
func (v *TagRef) GetCreatedBy() string { return v.CreatedBy }

// GetCreatedAt returns TagRef.CreatedAt, and is useful for accessing the field via an interface.
func (v *TagRef) GetCreatedAt() *time.Time { return v.CreatedAt }

// GetUpdatedAt returns TagRef.UpdatedAt, and is useful for accessing the field via an interface.
func (v *TagRef) GetUpdatedAt() *time.Time { return v.UpdatedAt }

// GetPolicies returns TagRef.Policies, and is useful for accessing the field via an interface.
func (v *TagRef) GetPolicies() []*PolicyEnforcementRef { return v.Policies }

type TeamRef struct {
	// id is randomly assigned
	Id                 string                  `json:"id"`
	Name               string                  `json:"name"`
	Roles              []*RoleRef              `json:"roles,omitempty"`
	Organization       *OrganizationRef        `json:"organization,omitempty"`
	Applications       []*ApplicationRef       `json:"applications,omitempty"`
	Labels             []*KeyValueRef          `json:"labels,omitempty"`
	Policies           []*PolicyDefinitionRef  `json:"policies,omitempty"`
	PolicyEnforcements []*PolicyEnforcementRef `json:"policyEnforcements,omitempty"`
}

// GetId returns TeamRef.Id, and is useful for accessing the field via an interface.
func (v *TeamRef) GetId() string { return v.Id }

// GetName returns TeamRef.Name, and is useful for accessing the field via an interface.
func (v *TeamRef) GetName() string { return v.Name }

// GetRoles returns TeamRef.Roles, and is useful for accessing the field via an interface.
func (v *TeamRef) GetRoles() []*RoleRef { return v.Roles }

// GetOrganization returns TeamRef.Organization, and is useful for accessing the field via an interface.
func (v *TeamRef) GetOrganization() *OrganizationRef { return v.Organization }

// GetApplications returns TeamRef.Applications, and is useful for accessing the field via an interface.
func (v *TeamRef) GetApplications() []*ApplicationRef { return v.Applications }

// GetLabels returns TeamRef.Labels, and is useful for accessing the field via an interface.
func (v *TeamRef) GetLabels() []*KeyValueRef { return v.Labels }

// GetPolicies returns TeamRef.Policies, and is useful for accessing the field via an interface.
func (v *TeamRef) GetPolicies() []*PolicyDefinitionRef { return v.Policies }

// GetPolicyEnforcements returns TeamRef.PolicyEnforcements, and is useful for accessing the field via an interface.
func (v *TeamRef) GetPolicyEnforcements() []*PolicyEnforcementRef { return v.PolicyEnforcements }

type ToolsUsedRef struct {
	Id       *string  `json:"id"`
	Source   string   `json:"source"`
	Build    string   `json:"build"`
	Artifact string   `json:"artifact"`
	Deploy   string   `json:"deploy"`
	Sbom     string   `json:"sbom"`
	Misc     []string `json:"misc"`
}

// GetId returns ToolsUsedRef.Id, and is useful for accessing the field via an interface.
func (v *ToolsUsedRef) GetId() *string { return v.Id }

// GetSource returns ToolsUsedRef.Source, and is useful for accessing the field via an interface.
func (v *ToolsUsedRef) GetSource() string { return v.Source }

// GetBuild returns ToolsUsedRef.Build, and is useful for accessing the field via an interface.
func (v *ToolsUsedRef) GetBuild() string { return v.Build }

// GetArtifact returns ToolsUsedRef.Artifact, and is useful for accessing the field via an interface.
func (v *ToolsUsedRef) GetArtifact() string { return v.Artifact }

// GetDeploy returns ToolsUsedRef.Deploy, and is useful for accessing the field via an interface.
func (v *ToolsUsedRef) GetDeploy() string { return v.Deploy }

// GetSbom returns ToolsUsedRef.Sbom, and is useful for accessing the field via an interface.
func (v *ToolsUsedRef) GetSbom() string { return v.Sbom }

// GetMisc returns ToolsUsedRef.Misc, and is useful for accessing the field via an interface.
func (v *ToolsUsedRef) GetMisc() []string { return v.Misc }

type VulnerabilityRef struct {
	Id             string          `json:"id"`
	Parent         string          `json:"parent"`
	Ratings        Severity        `json:"ratings"`
	Cwes           []*CWERef       `json:"cwes,omitempty"`
	Summary        string          `json:"summary"`
	Detail         string          `json:"detail"`
	Recommendation string          `json:"recommendation"`
	Published      *time.Time      `json:"published"`
	Modified       *time.Time      `json:"modified"`
	CreatedAt      *time.Time      `json:"createdAt"`
	Cvss           float64         `json:"cvss"`
	Priority       string          `json:"priority"`
	Epss           float64         `json:"epss"`
	Cisa_kev       string          `json:"cisa_kev"`
	Affects        []*ComponentRef `json:"affects,omitempty"`
}

// GetId returns VulnerabilityRef.Id, and is useful for accessing the field via an interface.
func (v *VulnerabilityRef) GetId() string { return v.Id }

// GetParent returns VulnerabilityRef.Parent, and is useful for accessing the field via an interface.
func (v *VulnerabilityRef) GetParent() string { return v.Parent }

// GetRatings returns VulnerabilityRef.Ratings, and is useful for accessing the field via an interface.
func (v *VulnerabilityRef) GetRatings() Severity { return v.Ratings }

// GetCwes returns VulnerabilityRef.Cwes, and is useful for accessing the field via an interface.
func (v *VulnerabilityRef) GetCwes() []*CWERef { return v.Cwes }

// GetSummary returns VulnerabilityRef.Summary, and is useful for accessing the field via an interface.
func (v *VulnerabilityRef) GetSummary() string { return v.Summary }

// GetDetail returns VulnerabilityRef.Detail, and is useful for accessing the field via an interface.
func (v *VulnerabilityRef) GetDetail() string { return v.Detail }

// GetRecommendation returns VulnerabilityRef.Recommendation, and is useful for accessing the field via an interface.
func (v *VulnerabilityRef) GetRecommendation() string { return v.Recommendation }

// GetPublished returns VulnerabilityRef.Published, and is useful for accessing the field via an interface.
func (v *VulnerabilityRef) GetPublished() *time.Time { return v.Published }

// GetModified returns VulnerabilityRef.Modified, and is useful for accessing the field via an interface.
func (v *VulnerabilityRef) GetModified() *time.Time { return v.Modified }

// GetCreatedAt returns VulnerabilityRef.CreatedAt, and is useful for accessing the field via an interface.
func (v *VulnerabilityRef) GetCreatedAt() *time.Time { return v.CreatedAt }

// GetCvss returns VulnerabilityRef.Cvss, and is useful for accessing the field via an interface.
func (v *VulnerabilityRef) GetCvss() float64 { return v.Cvss }

// GetPriority returns VulnerabilityRef.Priority, and is useful for accessing the field via an interface.
func (v *VulnerabilityRef) GetPriority() string { return v.Priority }

// GetEpss returns VulnerabilityRef.Epss, and is useful for accessing the field via an interface.
func (v *VulnerabilityRef) GetEpss() float64 { return v.Epss }

// GetCisa_kev returns VulnerabilityRef.Cisa_kev, and is useful for accessing the field via an interface.
func (v *VulnerabilityRef) GetCisa_kev() string { return v.Cisa_kev }

// GetAffects returns VulnerabilityRef.Affects, and is useful for accessing the field via an interface.
func (v *VulnerabilityRef) GetAffects() []*ComponentRef { return v.Affects }

// __addPolicyDefinitionInput is used internally by genqlient
type __addPolicyDefinitionInput struct {
	Input []*AddPolicyDefinitionInput `json:"input,omitempty"`
}

// GetInput returns __addPolicyDefinitionInput.Input, and is useful for accessing the field via an interface.
func (v *__addPolicyDefinitionInput) GetInput() []*AddPolicyDefinitionInput { return v.Input }

// __addPolicyEnforcementInput is used internally by genqlient
type __addPolicyEnforcementInput struct {
	Input []*AddPolicyEnforcementInput `json:"input,omitempty"`
}

// GetInput returns __addPolicyEnforcementInput.Input, and is useful for accessing the field via an interface.
func (v *__addPolicyEnforcementInput) GetInput() []*AddPolicyEnforcementInput { return v.Input }

// __addTagInput is used internally by genqlient
type __addTagInput struct {
	Tags []*AddTagInput `json:"tags,omitempty"`
}

// GetTags returns __addTagInput.Tags, and is useful for accessing the field via an interface.
func (v *__addTagInput) GetTags() []*AddTagInput { return v.Tags }

// __assignTagsToPolicyInput is used internally by genqlient
type __assignTagsToPolicyInput struct {
	PolicyEnforcementId *string    `json:"policyEnforcementId"`
	Tags                *TagRef    `json:"tags,omitempty"`
	UpdatedAt           *time.Time `json:"updatedAt"`
}

// GetPolicyEnforcementId returns __assignTagsToPolicyInput.PolicyEnforcementId, and is useful for accessing the field via an interface.
func (v *__assignTagsToPolicyInput) GetPolicyEnforcementId() *string { return v.PolicyEnforcementId }

// GetTags returns __assignTagsToPolicyInput.Tags, and is useful for accessing the field via an interface.
func (v *__assignTagsToPolicyInput) GetTags() *TagRef { return v.Tags }

// GetUpdatedAt returns __assignTagsToPolicyInput.UpdatedAt, and is useful for accessing the field via an interface.
func (v *__assignTagsToPolicyInput) GetUpdatedAt() *time.Time { return v.UpdatedAt }

// __checkIfExactPolicyDefinitionExistsInput is used internally by genqlient
type __checkIfExactPolicyDefinitionExistsInput struct {
	PolicyName      string `json:"policyName"`
	Category        string `json:"category"`
	Stage           string `json:"stage"`
	Description     string `json:"description"`
	ScheduledPolicy *bool  `json:"scheduledPolicy"`
	Script          string `json:"script"`
	Variables       string `json:"variables"`
	ConditionName   string `json:"conditionName"`
	Suggestion      string `json:"suggestion"`
	OrgId           string `json:"orgId"`
}

// GetPolicyName returns __checkIfExactPolicyDefinitionExistsInput.PolicyName, and is useful for accessing the field via an interface.
func (v *__checkIfExactPolicyDefinitionExistsInput) GetPolicyName() string { return v.PolicyName }

// GetCategory returns __checkIfExactPolicyDefinitionExistsInput.Category, and is useful for accessing the field via an interface.
func (v *__checkIfExactPolicyDefinitionExistsInput) GetCategory() string { return v.Category }

// GetStage returns __checkIfExactPolicyDefinitionExistsInput.Stage, and is useful for accessing the field via an interface.
func (v *__checkIfExactPolicyDefinitionExistsInput) GetStage() string { return v.Stage }

// GetDescription returns __checkIfExactPolicyDefinitionExistsInput.Description, and is useful for accessing the field via an interface.
func (v *__checkIfExactPolicyDefinitionExistsInput) GetDescription() string { return v.Description }

// GetScheduledPolicy returns __checkIfExactPolicyDefinitionExistsInput.ScheduledPolicy, and is useful for accessing the field via an interface.
func (v *__checkIfExactPolicyDefinitionExistsInput) GetScheduledPolicy() *bool {
	return v.ScheduledPolicy
}

// GetScript returns __checkIfExactPolicyDefinitionExistsInput.Script, and is useful for accessing the field via an interface.
func (v *__checkIfExactPolicyDefinitionExistsInput) GetScript() string { return v.Script }

// GetVariables returns __checkIfExactPolicyDefinitionExistsInput.Variables, and is useful for accessing the field via an interface.
func (v *__checkIfExactPolicyDefinitionExistsInput) GetVariables() string { return v.Variables }

// GetConditionName returns __checkIfExactPolicyDefinitionExistsInput.ConditionName, and is useful for accessing the field via an interface.
func (v *__checkIfExactPolicyDefinitionExistsInput) GetConditionName() string { return v.ConditionName }

// GetSuggestion returns __checkIfExactPolicyDefinitionExistsInput.Suggestion, and is useful for accessing the field via an interface.
func (v *__checkIfExactPolicyDefinitionExistsInput) GetSuggestion() string { return v.Suggestion }

// GetOrgId returns __checkIfExactPolicyDefinitionExistsInput.OrgId, and is useful for accessing the field via an interface.
func (v *__checkIfExactPolicyDefinitionExistsInput) GetOrgId() string { return v.OrgId }

// __checkIfPolicyEnforcementExistsInput is used internally by genqlient
type __checkIfPolicyEnforcementExistsInput struct {
	DatasourceTool string `json:"datasourceTool"`
	PolicyId       string `json:"policyId"`
}

// GetDatasourceTool returns __checkIfPolicyEnforcementExistsInput.DatasourceTool, and is useful for accessing the field via an interface.
func (v *__checkIfPolicyEnforcementExistsInput) GetDatasourceTool() string { return v.DatasourceTool }

// GetPolicyId returns __checkIfPolicyEnforcementExistsInput.PolicyId, and is useful for accessing the field via an interface.
func (v *__checkIfPolicyEnforcementExistsInput) GetPolicyId() string { return v.PolicyId }

// __checkIfPolicyNameExistsInput is used internally by genqlient
type __checkIfPolicyNameExistsInput struct {
	PolicyName string `json:"policyName"`
	OrgId      string `json:"orgId"`
}

// GetPolicyName returns __checkIfPolicyNameExistsInput.PolicyName, and is useful for accessing the field via an interface.
func (v *__checkIfPolicyNameExistsInput) GetPolicyName() string { return v.PolicyName }

// GetOrgId returns __checkIfPolicyNameExistsInput.OrgId, and is useful for accessing the field via an interface.
func (v *__checkIfPolicyNameExistsInput) GetOrgId() string { return v.OrgId }

// __checkIfTagExistsInput is used internally by genqlient
type __checkIfTagExistsInput struct {
	TagName   string `json:"tagName"`
	TagValue  string `json:"tagValue"`
	CreatedBy string `json:"createdBy"`
}

// GetTagName returns __checkIfTagExistsInput.TagName, and is useful for accessing the field via an interface.
func (v *__checkIfTagExistsInput) GetTagName() string { return v.TagName }

// GetTagValue returns __checkIfTagExistsInput.TagValue, and is useful for accessing the field via an interface.
func (v *__checkIfTagExistsInput) GetTagValue() string { return v.TagValue }

// GetCreatedBy returns __checkIfTagExistsInput.CreatedBy, and is useful for accessing the field via an interface.
func (v *__checkIfTagExistsInput) GetCreatedBy() string { return v.CreatedBy }

// __getLastPolicyIdInput is used internally by genqlient
type __getLastPolicyIdInput struct {
	OrganizationId string `json:"organizationId"`
}

// GetOrganizationId returns __getLastPolicyIdInput.OrganizationId, and is useful for accessing the field via an interface.
func (v *__getLastPolicyIdInput) GetOrganizationId() string { return v.OrganizationId }

// __updatePolicyDefinitionInput is used internally by genqlient
type __updatePolicyDefinitionInput struct {
	PolicyId        string     `json:"policyId"`
	Category        string     `json:"category"`
	Stage           string     `json:"stage"`
	Description     string     `json:"description"`
	ScheduledPolicy *bool      `json:"scheduledPolicy"`
	Script          string     `json:"script"`
	Variables       string     `json:"variables"`
	ConditionName   string     `json:"conditionName"`
	Suggestion      string     `json:"suggestion"`
	UpdatedAt       *time.Time `json:"updatedAt"`
}

// GetPolicyId returns __updatePolicyDefinitionInput.PolicyId, and is useful for accessing the field via an interface.
func (v *__updatePolicyDefinitionInput) GetPolicyId() string { return v.PolicyId }

// GetCategory returns __updatePolicyDefinitionInput.Category, and is useful for accessing the field via an interface.
func (v *__updatePolicyDefinitionInput) GetCategory() string { return v.Category }

// GetStage returns __updatePolicyDefinitionInput.Stage, and is useful for accessing the field via an interface.
func (v *__updatePolicyDefinitionInput) GetStage() string { return v.Stage }

// GetDescription returns __updatePolicyDefinitionInput.Description, and is useful for accessing the field via an interface.
func (v *__updatePolicyDefinitionInput) GetDescription() string { return v.Description }

// GetScheduledPolicy returns __updatePolicyDefinitionInput.ScheduledPolicy, and is useful for accessing the field via an interface.
func (v *__updatePolicyDefinitionInput) GetScheduledPolicy() *bool { return v.ScheduledPolicy }

// GetScript returns __updatePolicyDefinitionInput.Script, and is useful for accessing the field via an interface.
func (v *__updatePolicyDefinitionInput) GetScript() string { return v.Script }

// GetVariables returns __updatePolicyDefinitionInput.Variables, and is useful for accessing the field via an interface.
func (v *__updatePolicyDefinitionInput) GetVariables() string { return v.Variables }

// GetConditionName returns __updatePolicyDefinitionInput.ConditionName, and is useful for accessing the field via an interface.
func (v *__updatePolicyDefinitionInput) GetConditionName() string { return v.ConditionName }

// GetSuggestion returns __updatePolicyDefinitionInput.Suggestion, and is useful for accessing the field via an interface.
func (v *__updatePolicyDefinitionInput) GetSuggestion() string { return v.Suggestion }

// GetUpdatedAt returns __updatePolicyDefinitionInput.UpdatedAt, and is useful for accessing the field via an interface.
func (v *__updatePolicyDefinitionInput) GetUpdatedAt() *time.Time { return v.UpdatedAt }

// __updatePolicyEnforcementInput is used internally by genqlient
type __updatePolicyEnforcementInput struct {
	ConditionValue string     `json:"conditionValue"`
	PolicyEnfId    *string    `json:"policyEnfId"`
	UpdatedAt      *time.Time `json:"updatedAt"`
}

// GetConditionValue returns __updatePolicyEnforcementInput.ConditionValue, and is useful for accessing the field via an interface.
func (v *__updatePolicyEnforcementInput) GetConditionValue() string { return v.ConditionValue }

// GetPolicyEnfId returns __updatePolicyEnforcementInput.PolicyEnfId, and is useful for accessing the field via an interface.
func (v *__updatePolicyEnforcementInput) GetPolicyEnfId() *string { return v.PolicyEnfId }

// GetUpdatedAt returns __updatePolicyEnforcementInput.UpdatedAt, and is useful for accessing the field via an interface.
func (v *__updatePolicyEnforcementInput) GetUpdatedAt() *time.Time { return v.UpdatedAt }

// addPolicyDefinitionAddPolicyDefinitionAddPolicyDefinitionPayload includes the requested fields of the GraphQL type AddPolicyDefinitionPayload.
type addPolicyDefinitionAddPolicyDefinitionAddPolicyDefinitionPayload struct {
	NumUids *int `json:"numUids"`
}

// GetNumUids returns addPolicyDefinitionAddPolicyDefinitionAddPolicyDefinitionPayload.NumUids, and is useful for accessing the field via an interface.
func (v *addPolicyDefinitionAddPolicyDefinitionAddPolicyDefinitionPayload) GetNumUids() *int {
	return v.NumUids
}

// addPolicyDefinitionResponse is returned by addPolicyDefinition on success.
type addPolicyDefinitionResponse struct {
	AddPolicyDefinition *addPolicyDefinitionAddPolicyDefinitionAddPolicyDefinitionPayload `json:"addPolicyDefinition"`
}

// GetAddPolicyDefinition returns addPolicyDefinitionResponse.AddPolicyDefinition, and is useful for accessing the field via an interface.
func (v *addPolicyDefinitionResponse) GetAddPolicyDefinition() *addPolicyDefinitionAddPolicyDefinitionAddPolicyDefinitionPayload {
	return v.AddPolicyDefinition
}

// addPolicyEnforcementAddPolicyEnforcementAddPolicyEnforcementPayload includes the requested fields of the GraphQL type AddPolicyEnforcementPayload.
type addPolicyEnforcementAddPolicyEnforcementAddPolicyEnforcementPayload struct {
	NumUids *int `json:"numUids"`
}

// GetNumUids returns addPolicyEnforcementAddPolicyEnforcementAddPolicyEnforcementPayload.NumUids, and is useful for accessing the field via an interface.
func (v *addPolicyEnforcementAddPolicyEnforcementAddPolicyEnforcementPayload) GetNumUids() *int {
	return v.NumUids
}

// addPolicyEnforcementResponse is returned by addPolicyEnforcement on success.
type addPolicyEnforcementResponse struct {
	AddPolicyEnforcement *addPolicyEnforcementAddPolicyEnforcementAddPolicyEnforcementPayload `json:"addPolicyEnforcement"`
}

// GetAddPolicyEnforcement returns addPolicyEnforcementResponse.AddPolicyEnforcement, and is useful for accessing the field via an interface.
func (v *addPolicyEnforcementResponse) GetAddPolicyEnforcement() *addPolicyEnforcementAddPolicyEnforcementAddPolicyEnforcementPayload {
	return v.AddPolicyEnforcement
}

// addTagAddTagAddTagPayload includes the requested fields of the GraphQL type AddTagPayload.
type addTagAddTagAddTagPayload struct {
	NumUids *int `json:"numUids"`
}

// GetNumUids returns addTagAddTagAddTagPayload.NumUids, and is useful for accessing the field via an interface.
func (v *addTagAddTagAddTagPayload) GetNumUids() *int { return v.NumUids }

// addTagResponse is returned by addTag on success.
type addTagResponse struct {
	AddTag *addTagAddTagAddTagPayload `json:"addTag"`
}

// GetAddTag returns addTagResponse.AddTag, and is useful for accessing the field via an interface.
func (v *addTagResponse) GetAddTag() *addTagAddTagAddTagPayload { return v.AddTag }

// assignTagsToPolicyResponse is returned by assignTagsToPolicy on success.
type assignTagsToPolicyResponse struct {
	UpdatePolicyEnforcement *assignTagsToPolicyUpdatePolicyEnforcementUpdatePolicyEnforcementPayload `json:"updatePolicyEnforcement"`
}

// GetUpdatePolicyEnforcement returns assignTagsToPolicyResponse.UpdatePolicyEnforcement, and is useful for accessing the field via an interface.
func (v *assignTagsToPolicyResponse) GetUpdatePolicyEnforcement() *assignTagsToPolicyUpdatePolicyEnforcementUpdatePolicyEnforcementPayload {
	return v.UpdatePolicyEnforcement
}

// assignTagsToPolicyUpdatePolicyEnforcementUpdatePolicyEnforcementPayload includes the requested fields of the GraphQL type UpdatePolicyEnforcementPayload.
type assignTagsToPolicyUpdatePolicyEnforcementUpdatePolicyEnforcementPayload struct {
	NumUids *int `json:"numUids"`
}

// GetNumUids returns assignTagsToPolicyUpdatePolicyEnforcementUpdatePolicyEnforcementPayload.NumUids, and is useful for accessing the field via an interface.
func (v *assignTagsToPolicyUpdatePolicyEnforcementUpdatePolicyEnforcementPayload) GetNumUids() *int {
	return v.NumUids
}

// checkIfExactPolicyDefinitionExistsQueryPolicyDefinition includes the requested fields of the GraphQL type PolicyDefinition.
type checkIfExactPolicyDefinitionExistsQueryPolicyDefinition struct {
	Id       string                                                                       `json:"id"`
	OwnerOrg *checkIfExactPolicyDefinitionExistsQueryPolicyDefinitionOwnerOrgOrganization `json:"ownerOrg"`
}

// GetId returns checkIfExactPolicyDefinitionExistsQueryPolicyDefinition.Id, and is useful for accessing the field via an interface.
func (v *checkIfExactPolicyDefinitionExistsQueryPolicyDefinition) GetId() string { return v.Id }

// GetOwnerOrg returns checkIfExactPolicyDefinitionExistsQueryPolicyDefinition.OwnerOrg, and is useful for accessing the field via an interface.
func (v *checkIfExactPolicyDefinitionExistsQueryPolicyDefinition) GetOwnerOrg() *checkIfExactPolicyDefinitionExistsQueryPolicyDefinitionOwnerOrgOrganization {
	return v.OwnerOrg
}

// checkIfExactPolicyDefinitionExistsQueryPolicyDefinitionOwnerOrgOrganization includes the requested fields of the GraphQL type Organization.
type checkIfExactPolicyDefinitionExistsQueryPolicyDefinitionOwnerOrgOrganization struct {
	// id is randomly assigned
	Id string `json:"id"`
}

// GetId returns checkIfExactPolicyDefinitionExistsQueryPolicyDefinitionOwnerOrgOrganization.Id, and is useful for accessing the field via an interface.
func (v *checkIfExactPolicyDefinitionExistsQueryPolicyDefinitionOwnerOrgOrganization) GetId() string {
	return v.Id
}

// checkIfExactPolicyDefinitionExistsResponse is returned by checkIfExactPolicyDefinitionExists on success.
type checkIfExactPolicyDefinitionExistsResponse struct {
	QueryPolicyDefinition []*checkIfExactPolicyDefinitionExistsQueryPolicyDefinition `json:"queryPolicyDefinition"`
}

// GetQueryPolicyDefinition returns checkIfExactPolicyDefinitionExistsResponse.QueryPolicyDefinition, and is useful for accessing the field via an interface.
func (v *checkIfExactPolicyDefinitionExistsResponse) GetQueryPolicyDefinition() []*checkIfExactPolicyDefinitionExistsQueryPolicyDefinition {
	return v.QueryPolicyDefinition
}

// checkIfPolicyEnforcementExistsQueryPolicyEnforcement includes the requested fields of the GraphQL type PolicyEnforcement.
type checkIfPolicyEnforcementExistsQueryPolicyEnforcement struct {
	Id             *string                                                                     `json:"id"`
	ConditionValue string                                                                      `json:"conditionValue"`
	Policy         *checkIfPolicyEnforcementExistsQueryPolicyEnforcementPolicyPolicyDefinition `json:"policy"`
	Tags           []*checkIfPolicyEnforcementExistsQueryPolicyEnforcementTagsTag              `json:"tags"`
}

// GetId returns checkIfPolicyEnforcementExistsQueryPolicyEnforcement.Id, and is useful for accessing the field via an interface.
func (v *checkIfPolicyEnforcementExistsQueryPolicyEnforcement) GetId() *string { return v.Id }

// GetConditionValue returns checkIfPolicyEnforcementExistsQueryPolicyEnforcement.ConditionValue, and is useful for accessing the field via an interface.
func (v *checkIfPolicyEnforcementExistsQueryPolicyEnforcement) GetConditionValue() string {
	return v.ConditionValue
}

// GetPolicy returns checkIfPolicyEnforcementExistsQueryPolicyEnforcement.Policy, and is useful for accessing the field via an interface.
func (v *checkIfPolicyEnforcementExistsQueryPolicyEnforcement) GetPolicy() *checkIfPolicyEnforcementExistsQueryPolicyEnforcementPolicyPolicyDefinition {
	return v.Policy
}

// GetTags returns checkIfPolicyEnforcementExistsQueryPolicyEnforcement.Tags, and is useful for accessing the field via an interface.
func (v *checkIfPolicyEnforcementExistsQueryPolicyEnforcement) GetTags() []*checkIfPolicyEnforcementExistsQueryPolicyEnforcementTagsTag {
	return v.Tags
}

// checkIfPolicyEnforcementExistsQueryPolicyEnforcementPolicyPolicyDefinition includes the requested fields of the GraphQL type PolicyDefinition.
type checkIfPolicyEnforcementExistsQueryPolicyEnforcementPolicyPolicyDefinition struct {
	Id string `json:"id"`
}

// GetId returns checkIfPolicyEnforcementExistsQueryPolicyEnforcementPolicyPolicyDefinition.Id, and is useful for accessing the field via an interface.
func (v *checkIfPolicyEnforcementExistsQueryPolicyEnforcementPolicyPolicyDefinition) GetId() string {
	return v.Id
}

// checkIfPolicyEnforcementExistsQueryPolicyEnforcementTagsTag includes the requested fields of the GraphQL type Tag.
// The GraphQL type's documentation follows.
//
// Tag tells us about the tags that are linked to policies and other components.
type checkIfPolicyEnforcementExistsQueryPolicyEnforcementTagsTag struct {
	Id string `json:"id"`
}

// GetId returns checkIfPolicyEnforcementExistsQueryPolicyEnforcementTagsTag.Id, and is useful for accessing the field via an interface.
func (v *checkIfPolicyEnforcementExistsQueryPolicyEnforcementTagsTag) GetId() string { return v.Id }

// checkIfPolicyEnforcementExistsResponse is returned by checkIfPolicyEnforcementExists on success.
type checkIfPolicyEnforcementExistsResponse struct {
	QueryPolicyEnforcement []*checkIfPolicyEnforcementExistsQueryPolicyEnforcement `json:"queryPolicyEnforcement"`
}

// GetQueryPolicyEnforcement returns checkIfPolicyEnforcementExistsResponse.QueryPolicyEnforcement, and is useful for accessing the field via an interface.
func (v *checkIfPolicyEnforcementExistsResponse) GetQueryPolicyEnforcement() []*checkIfPolicyEnforcementExistsQueryPolicyEnforcement {
	return v.QueryPolicyEnforcement
}

// checkIfPolicyNameExistsQueryPolicyDefinition includes the requested fields of the GraphQL type PolicyDefinition.
type checkIfPolicyNameExistsQueryPolicyDefinition struct {
	Id         string                                                            `json:"id"`
	PolicyName string                                                            `json:"policyName"`
	Stage      string                                                            `json:"stage"`
	Category   string                                                            `json:"category"`
	OwnerOrg   *checkIfPolicyNameExistsQueryPolicyDefinitionOwnerOrgOrganization `json:"ownerOrg"`
}

// GetId returns checkIfPolicyNameExistsQueryPolicyDefinition.Id, and is useful for accessing the field via an interface.
func (v *checkIfPolicyNameExistsQueryPolicyDefinition) GetId() string { return v.Id }

// GetPolicyName returns checkIfPolicyNameExistsQueryPolicyDefinition.PolicyName, and is useful for accessing the field via an interface.
func (v *checkIfPolicyNameExistsQueryPolicyDefinition) GetPolicyName() string { return v.PolicyName }

// GetStage returns checkIfPolicyNameExistsQueryPolicyDefinition.Stage, and is useful for accessing the field via an interface.
func (v *checkIfPolicyNameExistsQueryPolicyDefinition) GetStage() string { return v.Stage }

// GetCategory returns checkIfPolicyNameExistsQueryPolicyDefinition.Category, and is useful for accessing the field via an interface.
func (v *checkIfPolicyNameExistsQueryPolicyDefinition) GetCategory() string { return v.Category }

// GetOwnerOrg returns checkIfPolicyNameExistsQueryPolicyDefinition.OwnerOrg, and is useful for accessing the field via an interface.
func (v *checkIfPolicyNameExistsQueryPolicyDefinition) GetOwnerOrg() *checkIfPolicyNameExistsQueryPolicyDefinitionOwnerOrgOrganization {
	return v.OwnerOrg
}

// checkIfPolicyNameExistsQueryPolicyDefinitionOwnerOrgOrganization includes the requested fields of the GraphQL type Organization.
type checkIfPolicyNameExistsQueryPolicyDefinitionOwnerOrgOrganization struct {
	// id is randomly assigned
	Id string `json:"id"`
}

// GetId returns checkIfPolicyNameExistsQueryPolicyDefinitionOwnerOrgOrganization.Id, and is useful for accessing the field via an interface.
func (v *checkIfPolicyNameExistsQueryPolicyDefinitionOwnerOrgOrganization) GetId() string {
	return v.Id
}

// checkIfPolicyNameExistsResponse is returned by checkIfPolicyNameExists on success.
type checkIfPolicyNameExistsResponse struct {
	QueryPolicyDefinition []*checkIfPolicyNameExistsQueryPolicyDefinition `json:"queryPolicyDefinition"`
}

// GetQueryPolicyDefinition returns checkIfPolicyNameExistsResponse.QueryPolicyDefinition, and is useful for accessing the field via an interface.
func (v *checkIfPolicyNameExistsResponse) GetQueryPolicyDefinition() []*checkIfPolicyNameExistsQueryPolicyDefinition {
	return v.QueryPolicyDefinition
}

// checkIfTagExistsQueryTag includes the requested fields of the GraphQL type Tag.
// The GraphQL type's documentation follows.
//
// Tag tells us about the tags that are linked to policies and other components.
type checkIfTagExistsQueryTag struct {
	Id string `json:"id"`
}

// GetId returns checkIfTagExistsQueryTag.Id, and is useful for accessing the field via an interface.
func (v *checkIfTagExistsQueryTag) GetId() string { return v.Id }

// checkIfTagExistsResponse is returned by checkIfTagExists on success.
type checkIfTagExistsResponse struct {
	QueryTag []*checkIfTagExistsQueryTag `json:"queryTag"`
}

// GetQueryTag returns checkIfTagExistsResponse.QueryTag, and is useful for accessing the field via an interface.
func (v *checkIfTagExistsResponse) GetQueryTag() []*checkIfTagExistsQueryTag { return v.QueryTag }

// getLastPolicyIdQueryOrganization includes the requested fields of the GraphQL type Organization.
type getLastPolicyIdQueryOrganization struct {
	Policies []*getLastPolicyIdQueryOrganizationPoliciesPolicyDefinition `json:"policies"`
}

// GetPolicies returns getLastPolicyIdQueryOrganization.Policies, and is useful for accessing the field via an interface.
func (v *getLastPolicyIdQueryOrganization) GetPolicies() []*getLastPolicyIdQueryOrganizationPoliciesPolicyDefinition {
	return v.Policies
}

// getLastPolicyIdQueryOrganizationPoliciesPolicyDefinition includes the requested fields of the GraphQL type PolicyDefinition.
type getLastPolicyIdQueryOrganizationPoliciesPolicyDefinition struct {
	Id string `json:"id"`
}

// GetId returns getLastPolicyIdQueryOrganizationPoliciesPolicyDefinition.Id, and is useful for accessing the field via an interface.
func (v *getLastPolicyIdQueryOrganizationPoliciesPolicyDefinition) GetId() string { return v.Id }

// getLastPolicyIdResponse is returned by getLastPolicyId on success.
type getLastPolicyIdResponse struct {
	QueryOrganization []*getLastPolicyIdQueryOrganization `json:"queryOrganization"`
}

// GetQueryOrganization returns getLastPolicyIdResponse.QueryOrganization, and is useful for accessing the field via an interface.
func (v *getLastPolicyIdResponse) GetQueryOrganization() []*getLastPolicyIdQueryOrganization {
	return v.QueryOrganization
}

// getLastTagIdAggregateTagTagAggregateResult includes the requested fields of the GraphQL type TagAggregateResult.
type getLastTagIdAggregateTagTagAggregateResult struct {
	Count *int `json:"count"`
}

// GetCount returns getLastTagIdAggregateTagTagAggregateResult.Count, and is useful for accessing the field via an interface.
func (v *getLastTagIdAggregateTagTagAggregateResult) GetCount() *int { return v.Count }

// getLastTagIdResponse is returned by getLastTagId on success.
type getLastTagIdResponse struct {
	AggregateTag *getLastTagIdAggregateTagTagAggregateResult `json:"aggregateTag"`
}

// GetAggregateTag returns getLastTagIdResponse.AggregateTag, and is useful for accessing the field via an interface.
func (v *getLastTagIdResponse) GetAggregateTag() *getLastTagIdAggregateTagTagAggregateResult {
	return v.AggregateTag
}

// updatePolicyDefinitionResponse is returned by updatePolicyDefinition on success.
type updatePolicyDefinitionResponse struct {
	UpdatePolicyDefinition *updatePolicyDefinitionUpdatePolicyDefinitionUpdatePolicyDefinitionPayload `json:"updatePolicyDefinition"`
}

// GetUpdatePolicyDefinition returns updatePolicyDefinitionResponse.UpdatePolicyDefinition, and is useful for accessing the field via an interface.
func (v *updatePolicyDefinitionResponse) GetUpdatePolicyDefinition() *updatePolicyDefinitionUpdatePolicyDefinitionUpdatePolicyDefinitionPayload {
	return v.UpdatePolicyDefinition
}

// updatePolicyDefinitionUpdatePolicyDefinitionUpdatePolicyDefinitionPayload includes the requested fields of the GraphQL type UpdatePolicyDefinitionPayload.
type updatePolicyDefinitionUpdatePolicyDefinitionUpdatePolicyDefinitionPayload struct {
	NumUids *int `json:"numUids"`
}

// GetNumUids returns updatePolicyDefinitionUpdatePolicyDefinitionUpdatePolicyDefinitionPayload.NumUids, and is useful for accessing the field via an interface.
func (v *updatePolicyDefinitionUpdatePolicyDefinitionUpdatePolicyDefinitionPayload) GetNumUids() *int {
	return v.NumUids
}

// updatePolicyEnforcementResponse is returned by updatePolicyEnforcement on success.
type updatePolicyEnforcementResponse struct {
	UpdatePolicyEnforcement *updatePolicyEnforcementUpdatePolicyEnforcementUpdatePolicyEnforcementPayload `json:"updatePolicyEnforcement"`
}

// GetUpdatePolicyEnforcement returns updatePolicyEnforcementResponse.UpdatePolicyEnforcement, and is useful for accessing the field via an interface.
func (v *updatePolicyEnforcementResponse) GetUpdatePolicyEnforcement() *updatePolicyEnforcementUpdatePolicyEnforcementUpdatePolicyEnforcementPayload {
	return v.UpdatePolicyEnforcement
}

// updatePolicyEnforcementUpdatePolicyEnforcementUpdatePolicyEnforcementPayload includes the requested fields of the GraphQL type UpdatePolicyEnforcementPayload.
type updatePolicyEnforcementUpdatePolicyEnforcementUpdatePolicyEnforcementPayload struct {
	NumUids *int `json:"numUids"`
}

// GetNumUids returns updatePolicyEnforcementUpdatePolicyEnforcementUpdatePolicyEnforcementPayload.NumUids, and is useful for accessing the field via an interface.
func (v *updatePolicyEnforcementUpdatePolicyEnforcementUpdatePolicyEnforcementPayload) GetNumUids() *int {
	return v.NumUids
}

// The query or mutation executed by addPolicyDefinition.
const addPolicyDefinition_Operation = `
mutation addPolicyDefinition ($input: [AddPolicyDefinitionInput!]!) {
	addPolicyDefinition(input: $input) {
		numUids
	}
}
`

func addPolicyDefinition(
	ctx_ context.Context,
	client_ graphql.Client,
	input []*AddPolicyDefinitionInput,
) (*addPolicyDefinitionResponse, error) {
	req_ := &graphql.Request{
		OpName: "addPolicyDefinition",
		Query:  addPolicyDefinition_Operation,
		Variables: &__addPolicyDefinitionInput{
			Input: input,
		},
	}
	var err_ error

	var data_ addPolicyDefinitionResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by addPolicyEnforcement.
const addPolicyEnforcement_Operation = `
mutation addPolicyEnforcement ($input: [AddPolicyEnforcementInput!]!) {
	addPolicyEnforcement(input: $input) {
		numUids
	}
}
`

func addPolicyEnforcement(
	ctx_ context.Context,
	client_ graphql.Client,
	input []*AddPolicyEnforcementInput,
) (*addPolicyEnforcementResponse, error) {
	req_ := &graphql.Request{
		OpName: "addPolicyEnforcement",
		Query:  addPolicyEnforcement_Operation,
		Variables: &__addPolicyEnforcementInput{
			Input: input,
		},
	}
	var err_ error

	var data_ addPolicyEnforcementResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by addTag.
const addTag_Operation = `
mutation addTag ($tags: [AddTagInput!]!) {
	addTag(input: $tags) {
		numUids
	}
}
`

func addTag(
	ctx_ context.Context,
	client_ graphql.Client,
	tags []*AddTagInput,
) (*addTagResponse, error) {
	req_ := &graphql.Request{
		OpName: "addTag",
		Query:  addTag_Operation,
		Variables: &__addTagInput{
			Tags: tags,
		},
	}
	var err_ error

	var data_ addTagResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by assignTagsToPolicy.
const assignTagsToPolicy_Operation = `
mutation assignTagsToPolicy ($policyEnforcementId: ID!, $tags: TagRef!, $updatedAt: DateTime!) {
	updatePolicyEnforcement(input: {filter:{id:[$policyEnforcementId]},set:{tags:[$tags],updatedAt:$updatedAt}}) {
		numUids
	}
}
`

func assignTagsToPolicy(
	ctx_ context.Context,
	client_ graphql.Client,
	policyEnforcementId *string,
	tags *TagRef,
	updatedAt *time.Time,
) (*assignTagsToPolicyResponse, error) {
	req_ := &graphql.Request{
		OpName: "assignTagsToPolicy",
		Query:  assignTagsToPolicy_Operation,
		Variables: &__assignTagsToPolicyInput{
			PolicyEnforcementId: policyEnforcementId,
			Tags:                tags,
			UpdatedAt:           updatedAt,
		},
	}
	var err_ error

	var data_ assignTagsToPolicyResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by checkIfExactPolicyDefinitionExists.
const checkIfExactPolicyDefinitionExists_Operation = `
query checkIfExactPolicyDefinitionExists ($policyName: String!, $category: String!, $stage: String!, $description: String!, $scheduledPolicy: Boolean!, $script: String!, $variables: String!, $conditionName: String!, $suggestion: String!, $orgId: String!) {
	queryPolicyDefinition(filter: {policyName:{eq:$policyName},category:{eq:$category},stage:{eq:$stage},description:{eq:$description},scheduledPolicy:$scheduledPolicy,script:{eq:$script},variables:{eq:$variables},conditionName:{eq:$conditionName},suggestion:{eq:$suggestion}}) @cascade {
		id
		ownerOrg(filter: {id:{eq:$orgId}}) {
			id
		}
	}
}
`

func checkIfExactPolicyDefinitionExists(
	ctx_ context.Context,
	client_ graphql.Client,
	policyName string,
	category string,
	stage string,
	description string,
	scheduledPolicy *bool,
	script string,
	variables string,
	conditionName string,
	suggestion string,
	orgId string,
) (*checkIfExactPolicyDefinitionExistsResponse, error) {
	req_ := &graphql.Request{
		OpName: "checkIfExactPolicyDefinitionExists",
		Query:  checkIfExactPolicyDefinitionExists_Operation,
		Variables: &__checkIfExactPolicyDefinitionExistsInput{
			PolicyName:      policyName,
			Category:        category,
			Stage:           stage,
			Description:     description,
			ScheduledPolicy: scheduledPolicy,
			Script:          script,
			Variables:       variables,
			ConditionName:   conditionName,
			Suggestion:      suggestion,
			OrgId:           orgId,
		},
	}
	var err_ error

	var data_ checkIfExactPolicyDefinitionExistsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by checkIfPolicyEnforcementExists.
const checkIfPolicyEnforcementExists_Operation = `
query checkIfPolicyEnforcementExists ($datasourceTool: String!, $policyId: String!) {
	queryPolicyEnforcement(filter: {datasourceTool:{eq:$datasourceTool}}) @cascade(fields: ["policy"]) {
		id
		conditionValue
		policy(filter: {id:{eq:$policyId}}) {
			id
		}
		tags {
			id
		}
	}
}
`

func checkIfPolicyEnforcementExists(
	ctx_ context.Context,
	client_ graphql.Client,
	datasourceTool string,
	policyId string,
) (*checkIfPolicyEnforcementExistsResponse, error) {
	req_ := &graphql.Request{
		OpName: "checkIfPolicyEnforcementExists",
		Query:  checkIfPolicyEnforcementExists_Operation,
		Variables: &__checkIfPolicyEnforcementExistsInput{
			DatasourceTool: datasourceTool,
			PolicyId:       policyId,
		},
	}
	var err_ error

	var data_ checkIfPolicyEnforcementExistsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by checkIfPolicyNameExists.
const checkIfPolicyNameExists_Operation = `
query checkIfPolicyNameExists ($policyName: String!, $orgId: String!) {
	queryPolicyDefinition(filter: {policyName:{eq:$policyName}}) @cascade {
		id
		policyName
		stage
		category
		ownerOrg(filter: {id:{eq:$orgId}}) {
			id
		}
	}
}
`

func checkIfPolicyNameExists(
	ctx_ context.Context,
	client_ graphql.Client,
	policyName string,
	orgId string,
) (*checkIfPolicyNameExistsResponse, error) {
	req_ := &graphql.Request{
		OpName: "checkIfPolicyNameExists",
		Query:  checkIfPolicyNameExists_Operation,
		Variables: &__checkIfPolicyNameExistsInput{
			PolicyName: policyName,
			OrgId:      orgId,
		},
	}
	var err_ error

	var data_ checkIfPolicyNameExistsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by checkIfTagExists.
const checkIfTagExists_Operation = `
query checkIfTagExists ($tagName: String!, $tagValue: String!, $createdBy: String!) {
	queryTag(filter: {tagName:{eq:$tagName},tagValue:{eq:$tagValue},createdBy:{eq:$createdBy}}) {
		id
	}
}
`

func checkIfTagExists(
	ctx_ context.Context,
	client_ graphql.Client,
	tagName string,
	tagValue string,
	createdBy string,
) (*checkIfTagExistsResponse, error) {
	req_ := &graphql.Request{
		OpName: "checkIfTagExists",
		Query:  checkIfTagExists_Operation,
		Variables: &__checkIfTagExistsInput{
			TagName:   tagName,
			TagValue:  tagValue,
			CreatedBy: createdBy,
		},
	}
	var err_ error

	var data_ checkIfTagExistsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by getLastPolicyId.
const getLastPolicyId_Operation = `
query getLastPolicyId ($organizationId: String!) {
	queryOrganization(filter: {id:{eq:$organizationId}}) {
		policies {
			id
		}
	}
}
`

func getLastPolicyId(
	ctx_ context.Context,
	client_ graphql.Client,
	organizationId string,
) (*getLastPolicyIdResponse, error) {
	req_ := &graphql.Request{
		OpName: "getLastPolicyId",
		Query:  getLastPolicyId_Operation,
		Variables: &__getLastPolicyIdInput{
			OrganizationId: organizationId,
		},
	}
	var err_ error

	var data_ getLastPolicyIdResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by getLastTagId.
const getLastTagId_Operation = `
query getLastTagId {
	aggregateTag {
		count
	}
}
`

func getLastTagId(
	ctx_ context.Context,
	client_ graphql.Client,
) (*getLastTagIdResponse, error) {
	req_ := &graphql.Request{
		OpName: "getLastTagId",
		Query:  getLastTagId_Operation,
	}
	var err_ error

	var data_ getLastTagIdResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by updatePolicyDefinition.
const updatePolicyDefinition_Operation = `
mutation updatePolicyDefinition ($policyId: String!, $category: String!, $stage: String!, $description: String!, $scheduledPolicy: Boolean!, $script: String!, $variables: String!, $conditionName: String!, $suggestion: String!, $updatedAt: DateTime!) {
	updatePolicyDefinition(input: {filter:{id:{eq:$policyId}},set:{category:$category,stage:$stage,description:$description,scheduledPolicy:$scheduledPolicy,script:$script,variables:$variables,conditionName:$conditionName,suggestion:$suggestion,updatedAt:$updatedAt}}) {
		numUids
	}
}
`

func updatePolicyDefinition(
	ctx_ context.Context,
	client_ graphql.Client,
	policyId string,
	category string,
	stage string,
	description string,
	scheduledPolicy *bool,
	script string,
	variables string,
	conditionName string,
	suggestion string,
	updatedAt *time.Time,
) (*updatePolicyDefinitionResponse, error) {
	req_ := &graphql.Request{
		OpName: "updatePolicyDefinition",
		Query:  updatePolicyDefinition_Operation,
		Variables: &__updatePolicyDefinitionInput{
			PolicyId:        policyId,
			Category:        category,
			Stage:           stage,
			Description:     description,
			ScheduledPolicy: scheduledPolicy,
			Script:          script,
			Variables:       variables,
			ConditionName:   conditionName,
			Suggestion:      suggestion,
			UpdatedAt:       updatedAt,
		},
	}
	var err_ error

	var data_ updatePolicyDefinitionResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by updatePolicyEnforcement.
const updatePolicyEnforcement_Operation = `
mutation updatePolicyEnforcement ($conditionValue: String!, $policyEnfId: ID!, $updatedAt: DateTime!) {
	updatePolicyEnforcement(input: {set:{conditionValue:$conditionValue,updatedAt:$updatedAt},filter:{id:[$policyEnfId]}}) {
		numUids
	}
}
`

func updatePolicyEnforcement(
	ctx_ context.Context,
	client_ graphql.Client,
	conditionValue string,
	policyEnfId *string,
	updatedAt *time.Time,
) (*updatePolicyEnforcementResponse, error) {
	req_ := &graphql.Request{
		OpName: "updatePolicyEnforcement",
		Query:  updatePolicyEnforcement_Operation,
		Variables: &__updatePolicyEnforcementInput{
			ConditionValue: conditionValue,
			PolicyEnfId:    policyEnfId,
			UpdatedAt:      updatedAt,
		},
	}
	var err_ error

	var data_ updatePolicyEnforcementResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}
